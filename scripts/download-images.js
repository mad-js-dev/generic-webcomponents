import { writeFile, mkdir } from 'node:fs/promises';
import { fileURLToPath } from 'node:url';
import { dirname, join } from 'node:path';
import { createWriteStream } from 'node:fs';
import fetch from 'node-fetch';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const IMAGES_DIR = join(__dirname, '../public/images/samples');

// Create a simple delay function
const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

// Sample images data with direct image URLs
const sampleImages = [
  {
    filename: 'nature.jpg',
    url: 'https://images.unsplash.com/photo-1506744038136-46273834b3fb?w=1920&h=1080&fit=crop',
    title: 'Nature',
    alt: 'Scenic nature landscape'
  },
  {
    filename: 'architecture.jpg',
    url: 'https://images.unsplash.com/photo-1487958449943-2429e8be8625?w=1920&h=1080&fit=crop',
    title: 'Architecture',
    alt: 'Modern architecture building'
  },
  {
    filename: 'technology.jpg',
    url: 'https://images.unsplash.com/photo-1518770660439-4636190af475?w=1920&h=1080&fit=crop',
    title: 'Technology',
    alt: 'Technology circuit board'
  }
];

async function downloadImage(url, filepath) {
  try {
    const response = await fetch(url);
    
    if (!response.ok) {
      throw new Error(`Failed to download ${url}: ${response.status} ${response.statusText}`);
    }
    
    const fileStream = createWriteStream(filepath);
    
    if (response.body) {
      // Convert the response body to a readable stream and pipe it to a file
      await new Promise((resolve, reject) => {
        response.body.pipe(fileStream);
        response.body.on('error', reject);
        fileStream.on('finish', resolve);
      });
    } else {
      throw new Error('No response body');
    }
    
    console.log(`✓ Downloaded ${filepath}`);
    return filepath;
  } catch (error) {
    console.error(`Error downloading ${url}:`, error.message);
    try {
      // Try to delete the file if it was partially downloaded
      const fs = await import('node:fs/promises');
      await fs.unlink(filepath).catch(() => {});
    } catch (e) {
      // Ignore errors during cleanup
    }
    throw error;
  }
}

async function main() {
  try {
    // Ensure directory exists
    await mkdir(IMAGES_DIR, { recursive: true }).catch(() => {});
    
    console.log('Starting image download...');
    
    // Download each image one by one with a small delay
    const downloadedImages = [];
    
    for (const img of sampleImages) {
      try {
        const filepath = join(IMAGES_DIR, img.filename);
        console.log(`\nDownloading ${img.title}...`);
        await downloadImage(img.url, filepath);
        downloadedImages.push({
          ...img,
          localPath: `/images/samples/${img.filename}`
        });
        
        // Add a small delay between downloads
        await delay(1000);
      } catch (error) {
        console.error(`Failed to download ${img.title}:`, error.message);
      }
    }
    
    if (downloadedImages.length === 0) {
      throw new Error('No images were downloaded successfully');
    }
    
    // Generate an images.js file with the local paths
    const imagesJs = `// Auto-generated by download-images.js
export default ${JSON.stringify(
      downloadedImages.map(img => ({
        title: img.title,
        src: img.localPath,
        alt: img.alt
      })), 
      null, 
      2
    )};`;
    
    await writeFile(join(IMAGES_DIR, 'images.js'), imagesJs);
    
    console.log('\n✓ All images downloaded successfully!');
    console.log(`Local images data saved to: ${join(IMAGES_DIR, 'images.js')}`);
    
    return downloadedImages;
  } catch (error) {
    console.error('Error in main process:', error);
    process.exit(1);
  }
}

main();
