{"version":3,"file":"index-C3Ea3XMP.js","sources":["../src/components/molecules/collapsible-list/CollapsibleList.js","../src/components/atoms/icon-label/IconLabel.js","../src/components/molecules/collapsible-item/CollapsibleItem.js","../src/components/index.js","../src/wrappers/react/index.jsx"],"sourcesContent":["/**\r\n * CollapsibleList Component\r\n * A custom element that creates a collapsible list container\r\n */\r\n\r\nexport class CollapsibleList extends HTMLElement {\r\n  static get observedAttributes() {\r\n    return ['reverse-heading', 'single-item', 'accordion'];\r\n  }\r\n  \r\n  constructor() {\r\n    super();\r\n    this.attachShadow({ mode: 'open' });\r\n    this._isUpdating = false; // Track if we're currently updating to prevent reentrant calls\r\n    this._handleItemToggle = this._handleItemToggle.bind(this);\r\n    \r\n    const container = document.createElement('div');\r\n    const slot = document.createElement('slot');\r\n    \r\n    // Create styles for the component\r\n    const style = document.createElement('style');\r\n    style.textContent = `\r\n      :host {\r\n        display: block;\r\n        width: 100%;\r\n        --indent-size: 1.5rem;\r\n      }\r\n      \r\n      ::slotted(collapsible-item) {\r\n        display: block;\r\n        margin: 0.25rem 0;\r\n        padding: 0;\r\n        width: 100%;\r\n      }\r\n      \r\n      /* Nested lists should have a border */\r\n      ::slotted(collapsible-list) {\r\n        border-left: 1px solid #e0e0e0;\r\n        margin-left: 0.5rem;\r\n        padding-left: 0.5rem;\r\n      }\r\n      \r\n      /* Style for the header in collapsible items */\r\n      .collapsible-item__header {\r\n        display: flex;\r\n        align-items: center;\r\n        width: 100%;\r\n        flex-direction: row;\r\n      }\r\n      \r\n      /* Toggle container styles */\r\n      .collapsible-item__toggle-container {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        width: var(--toggle-size, 24px);\r\n        height: var(--toggle-size, 24px);\r\n        margin: var(--toggle-margin, 0 8px 0 0);\r\n        flex-shrink: 0;\r\n      }`;\r\n    \r\n    container.appendChild(slot);\r\n    this.shadowRoot.append(style, container);\r\n  }\r\n  \r\n  async connectedCallback() {\r\n    if (!this._initialized) {\r\n      this._initializeComponent();\r\n      this._initialized = true;\r\n      \r\n      // Set initial reverse heading state\r\n      await this._updateReverseHeading();\r\n      \r\n      // Set up event listeners for accordion behavior\r\n      this.addEventListener('toggle', this._handleItemToggle);\r\n      \r\n      // Ensure at least one item is expanded in accordion mode\r\n      if (this.hasAttribute('accordion')) {\r\n        this._ensureOneItemExpanded();\r\n      }\r\n    }\r\n    \r\n    // Set up mutation observer for dynamic content\r\n    this._setupMutationObserver();\r\n  }\r\n  \r\n  _initializeComponent() {\r\n    if (!this.hasAttribute('role')) {\r\n      this.setAttribute('role', 'list');\r\n    }\r\n    \r\n    if (!this.hasAttribute('aria-label') && !this.hasAttribute('aria-labelledby')) {\r\n      console.warn('collapsible-list: Add an aria-label or aria-labelledby attribute for accessibility');\r\n    }\r\n  }\r\n  \r\n  _setupMutationObserver() {\r\n    // Set up a mutation observer to handle dynamically added items and attribute changes\r\n    this._observer = new MutationObserver(async (mutations) => {\r\n      let shouldUpdate = false;\r\n      \r\n      for (const mutation of mutations) {\r\n        if (mutation.type === 'attributes' && mutation.attributeName === 'reverse-heading') {\r\n          shouldUpdate = true;\r\n          break;\r\n        } else if (mutation.type === 'childList') {\r\n          // Check if any added nodes are collapsible items or lists\r\n          for (const node of mutation.addedNodes) {\r\n            if (node.nodeType === Node.ELEMENT_NODE && \r\n                (node.matches('collapsible-item') || node.matches('collapsible-list'))) {\r\n              shouldUpdate = true;\r\n              break;\r\n            }\r\n          }\r\n          if (shouldUpdate) break;\r\n        }\r\n      }\r\n      \r\n      if (shouldUpdate) {\r\n        await this._updateReverseHeading();\r\n      }\r\n    });\r\n    \r\n    // Start observing the component for attribute changes and child list changes\r\n    this._observer.observe(this, {\r\n      attributes: true,\r\n      attributeFilter: ['reverse-heading'],\r\n      childList: true,\r\n      subtree: true\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Updates the reverse heading state for all child collapsible items\r\n   * @private\r\n   */\r\n  async _updateReverseHeading() {\r\n    // Prevent reentrant calls\r\n    if (this._isUpdating) return;\r\n    this._isUpdating = true;\r\n    \r\n    try {\r\n      const isReversed = this.hasAttribute('reverse-heading') && \r\n                       this.getAttribute('reverse-heading') !== 'false';\r\n      \r\n      // Temporarily disconnect observer to prevent infinite loop\r\n      if (this._observer) {\r\n        this._observer.disconnect();\r\n      }\r\n      \r\n      // Process direct child collapsible-items\r\n      const processItems = async (items) => {\r\n        for (const item of items) {\r\n          // Set the attribute on the item\r\n          if (isReversed) {\r\n            item.setAttribute('reverse-heading', '');\r\n          } else {\r\n            item.removeAttribute('reverse-heading');\r\n          }\r\n          \r\n          // Process any nested items in this item (only direct children)\r\n          const nestedItems = item.querySelectorAll(':scope > collapsible-item');\r\n          if (nestedItems.length > 0) {\r\n            await processItems(Array.from(nestedItems));\r\n          }\r\n          \r\n          // Process any nested lists in this item (only direct children)\r\n          const nestedLists = item.querySelectorAll(':scope > collapsible-list');\r\n          if (nestedLists.length > 0) {\r\n            await processLists(Array.from(nestedLists));\r\n          }\r\n        }\r\n      };\r\n      \r\n      // Process nested collapsible-lists\r\n      const processLists = async (lists) => {\r\n        for (const list of lists) {\r\n          // Skip if this is the current list to prevent cycles\r\n          if (list === this) continue;\r\n          \r\n          // Set the attribute on the list\r\n          if (isReversed) {\r\n            list.setAttribute('reverse-heading', '');\r\n          } else {\r\n            list.removeAttribute('reverse-heading');\r\n          }\r\n          \r\n          // Process any direct child items in this list\r\n          const nestedItems = list.querySelectorAll(':scope > collapsible-item');\r\n          if (nestedItems.length > 0) {\r\n            await processItems(Array.from(nestedItems));\r\n          }\r\n          \r\n          // Process any direct child lists\r\n          const nestedLists = list.querySelectorAll(':scope > collapsible-list');\r\n          if (nestedLists.length > 0) {\r\n            await processLists(Array.from(nestedLists));\r\n          }\r\n        }\r\n      };\r\n      \r\n      // Start processing from the current element\r\n      const items = this.querySelectorAll(':scope > collapsible-item');\r\n      if (items.length > 0) {\r\n        await processItems(Array.from(items));\r\n      }\r\n      \r\n      const lists = this.querySelectorAll(':scope > collapsible-list');\r\n      if (lists.length > 0) {\r\n        await processLists(Array.from(lists));\r\n      }\r\n      \r\n      // Force a reflow to ensure all attribute changes are applied\r\n      if (this.shadowRoot) {\r\n        this.shadowRoot.offsetHeight; // This forces a reflow\r\n      }\r\n    } catch (error) {\r\n      console.error('Error updating reverse heading:', error);\r\n    } finally {\r\n      // Reconnect observer if it exists\r\n      if (this._observer) {\r\n        this._observer.observe(this, {\r\n          attributes: true,\r\n          attributeFilter: ['reverse-heading'],\r\n          childList: true,\r\n          subtree: true\r\n        });\r\n      }\r\n      this._isUpdating = false;\r\n    }\r\n  }\r\n\r\n  _handleItemToggle(e) {\r\n    if (this._isUpdating) return;\r\n    \r\n    const target = e.target;\r\n    \r\n    // Only process if this is a direct child\r\n    if (target.parentElement === this) {\r\n      this._isUpdating = true;\r\n      \r\n      if (this.hasAttribute('accordion')) {\r\n        // In accordion mode, close other items when one is opened\r\n        if (target.expanded) {\r\n          this._closeOtherItems(target);\r\n        }\r\n      } else if (this.hasAttribute('single-item')) {\r\n        // In single-item mode, just close other items when one is opened\r\n        if (target.expanded) {\r\n          this._closeOtherItems(target);\r\n        }\r\n      }\r\n      \r\n      this._isUpdating = false;\r\n    }\r\n  }\r\n  \r\n  _closeOtherItems(exceptItem) {\r\n    // Don't close items if inside an image-collection\r\n    if (this.closest('image-collection')) {\r\n      return;\r\n    }\r\n    \r\n    const items = this.querySelectorAll('collapsible-item');\r\n    items.forEach(item => {\r\n      if (item !== exceptItem) {\r\n        item.expanded = false;\r\n      }\r\n    });\r\n  }\r\n  \r\n  _getOpenItems() {\r\n    return Array.from(this.querySelectorAll('collapsible-item[expanded]'));\r\n  }\r\n  \r\n  _ensureOneItemExpanded() {\r\n    if (!this.hasAttribute('accordion')) return;\r\n    \r\n    const openItems = this._getOpenItems();\r\n    if (openItems.length === 0) {\r\n      // If no items are open, open the first one\r\n      const firstItem = this.querySelector('collapsible-item');\r\n      if (firstItem) {\r\n        firstItem.setAttribute('expanded', '');\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Define the custom element\r\nif (!customElements.get('collapsible-list')) {\r\n  customElements.define('collapsible-list', CollapsibleList);\r\n}\r\n","/**\n * IconLabel Component\n * A custom element that displays an icon with a label\n */\n\nexport class IconLabel extends HTMLElement {\n  static get observedAttributes() {\n    return ['icon', 'label', 'reverse'];\n  }\n\n  constructor() {\n    super();\n    this.attachShadow({ mode: 'open' });\n    \n    // Default values\n    this._icon = '';\n    this._label = '';\n    this._reverse = false;\n    this._initialized = false;\n  }\n\n  connectedCallback() {\n    if (!this._initialized) {\n      this._initializeComponent();\n      this._initialized = true;\n    }\n    this._render();\n  }\n\n  _initializeComponent() {\n    // Create styles\n    const style = document.createElement('style');\n    style.textContent = `\n      :host {\n        display: inline-flex;\n        align-items: center;\n        font-family: inherit;\n        color: currentColor;\n      }\n\n      .icon-label {\n        display: inline-flex;\n        align-items: center;\n        gap: 0.5rem;\n      }\n\n      .icon-label--reverse {\n        flex-direction: row-reverse;\n      }\n\n      .icon-label__icon {\n        display: inline-flex;\n        align-items: center;\n        justify-content: center;\n        width: 1em;\n        height: 1em;\n      }\n      \n      .icon-label__icon img,\n      .icon-label__char {\n        width: 1em;\n        height: 1em;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      }\n      \n      .icon-label__char {\n        font-size: 1em;\n        line-height: 1;\n      }\n    `;\n\n\n    // Create container\n    const container = document.createElement('span');\n    container.className = 'icon-label';\n    container.setAttribute('part', 'container');\n\n    // Create icon slot\n    const iconSlot = document.createElement('slot');\n    iconSlot.name = 'icon';\n    iconSlot.className = 'icon-label__icon';\n    iconSlot.setAttribute('part', 'icon');\n\n    // Create label slot\n    const labelSlot = document.createElement('slot');\n    labelSlot.className = 'icon-label__label';\n    labelSlot.setAttribute('part', 'label');\n\n    // Append slots to container\n    container.appendChild(iconSlot);\n    container.appendChild(labelSlot);\n\n    // Append elements to shadow root\n    this.shadowRoot.appendChild(style);\n    this.shadowRoot.appendChild(container);\n\n    // Store references\n    this._container = container;\n    this._iconSlot = iconSlot;\n    this._labelSlot = labelSlot;\n  }\n\n  _render() {\n    if (!this._initialized) return;\n\n    // Update classes based on properties\n    this._container.className = 'icon-label';\n    if (this._reverse) {\n      this._container.classList.add('icon-label--reverse');\n    }\n\n    // Update icon if provided\n    if (this._icon && this._iconSlot) {\n      this._iconSlot.innerHTML = '';\n      \n      // Check if the icon is a single character (likely an emoji or icon character)\n      const isIconChar = this._icon.length === 1 || \n                       (this._icon.length === 2 && this._icon.codePointAt(0) > 0xFFFF);\n      \n      if (isIconChar) {\n        // For single character icons (emojis, etc.)\n        const charSpan = document.createElement('span');\n        charSpan.className = 'icon-label__char';\n        charSpan.textContent = this._icon;\n        this._iconSlot.appendChild(charSpan);\n      } else {\n        // For image paths (URLs or data URIs)\n        const img = document.createElement('img');\n        img.src = this._icon;\n        img.alt = ''; // Decorative image\n        this._iconSlot.appendChild(img);\n      }\n    }\n\n    // Set the label text\n    const labelText = this._label || this.textContent.trim();\n    if (labelText && this._labelSlot) {\n      // Clear any existing content in the label slot\n      this._labelSlot.textContent = '';\n      \n      // If there's no explicit label attribute but there is text content,\n      // move the text content to the label slot\n      if (!this._label && this.textContent.trim()) {\n        while (this.firstChild) {\n          this._labelSlot.appendChild(this.firstChild);\n        }\n      } else {\n        // Otherwise, just set the text content\n        this._labelSlot.textContent = labelText;\n      }\n    }\n  }\n\n  // Getters and setters for properties\n  get icon() {\n    return this._icon;\n  }\n\n  set icon(value) {\n    this._icon = value;\n    this.setAttribute('icon', value);\n  }\n\n  get label() {\n    return this._label || this.textContent.trim();\n  }\n\n  set label(value) {\n    this._label = value;\n    if (this._labelSlot) {\n      this._labelSlot.textContent = value;\n    }\n  }\n\n  get reverse() {\n    return this._reverse;\n  }\n\n  set reverse(value) {\n    this._reverse = value !== null && value !== false;\n    this._render();\n  }\n\n  // Handle attribute changes\n  attributeChangedCallback(name, oldValue, newValue) {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'icon':\n        this._icon = newValue || '';\n        break;\n      case 'label':\n        this._label = newValue || '';\n        if (this._labelSlot) {\n          this._labelSlot.textContent = this._label;\n        }\n        break;\n      case 'reverse':\n        this._reverse = newValue !== null;\n        this._render();\n        break;\n    }\n  }\n}\n\n// Define the custom element\nif (!customElements.get('icon-label')) {\n  customElements.define('icon-label', IconLabel);\n}\n","/**\n * CollapsibleItem Component\n * A custom element that creates a collapsible list item\n * \n * @attr {boolean} expanded - Whether the item is expanded or collapsed\n * @attr {string} icon - Optional icon to display next to the label\n * @attr {string} label - The text label for the collapsible item\n * @attr {boolean} removeshift - If true, removes the left padding from the content area\n */\n\nimport { IconLabel } from '../../atoms/icon-label/IconLabel.js';\n\n// Import regular CSS\nimport './CollapsibleItem.css';\n\nexport class CollapsibleItem extends HTMLLIElement {\n    static get observedAttributes() {\n        return ['expanded', 'icon', 'label', 'removeshift', 'hide-icon'];\n    }\n    \n    constructor() {\n        super();\n        this._isExpanded = false;\n        this._handleClick = this._handleClick.bind(this);\n        this._header = null;\n        this._content = null;\n        this._initialRender = true;\n        this._removeShift = false;\n        this.rendered = false;\n        \n        // Add base class to the host element\n        this.classList.add('collapsible-item');\n        \n        // Initialize expanded state\n        if (this.hasAttribute('expanded')) {\n            this._isExpanded = true;\n            this.classList.add('collapsible-item--expanded');\n        }\n        \n        // Initialize no-padding state\n        if (this.hasAttribute('removeshift')) {\n            this.classList.add('collapsible-item--no-padding');\n        }\n    }\n\n    connectedCallback() {\n        // Ensure the component has the correct role for accessibility\n        if (!this.hasAttribute('role')) {\n            this.setAttribute('role', 'listitem');\n        }\n        \n        // Set up the component if not already rendered\n        if (!this.rendered) {\n            this._render();\n            this.rendered = true;\n            this._addEventListeners();\n            \n            // Ensure the content visibility is set correctly based on the expanded state\n            this._updateContentVisibility();\n        }\n        \n        // Ensure the component is properly styled\n        this.classList.add('collapsible-item');\n        \n        // Set initial expanded state\n        if (this.hasAttribute('expanded')) {\n            this._isExpanded = true;\n            this.classList.add('collapsible-item--expanded');\n        } else {\n            this._isExpanded = false;\n            this.classList.remove('collapsible-item--expanded');\n        }\n    }\n    \n    disconnectedCallback() {\n        this._removeEventListeners();\n    }\n    \n    _addEventListeners() {\n        // Add click listener to the component itself for event delegation\n        this.addEventListener('click', this._handleClick);\n    }\n    \n    _removeEventListeners() {\n        this.removeEventListener('click', this._handleClick);\n    }\n    \n    _handleClick(event) {\n        // Find the closest header from the click target\n        const header = event.target.closest('.collapsible-item__header');\n        if (!header) return; // Not a header click\n        \n        // Prevent the default action to avoid any native behavior\n        event.preventDefault();\n        event.stopPropagation();\n        \n        // Toggle the expanded state\n        const isExpanding = !this.hasAttribute('expanded');\n        \n        // Update the expanded attribute\n        if (isExpanding) {\n            this.setAttribute('expanded', '');\n        } else {\n            this.removeAttribute('expanded');\n        }\n        \n        // Update the internal state and UI\n        this._isExpanded = isExpanding;\n        this._updateContentVisibility();\n        \n        // Dispatch a custom event\n        this.dispatchEvent(new CustomEvent('toggle', {\n            detail: { expanded: isExpanding },\n            bubbles: true,\n            composed: true\n        }));\n    }\n    \n    _createHeader() {\n        const header = document.createElement('div');\n        header.className = 'collapsible-item__header';\n        \n        // Create a container for the icon and label\n        const contentWrapper = document.createElement('div');\n        contentWrapper.style.display = 'flex';\n        contentWrapper.style.alignItems = 'center';\n        contentWrapper.style.flex = '1';\n        \n        // Add icon if provided and not hidden\n        const hideIcon = this.hasAttribute('hide-icon');\n        const icon = this.getAttribute('icon');\n        if (icon && !hideIcon) {\n            const iconEl = document.createElement('span');\n            iconEl.className = 'collapsible-item__icon';\n            iconEl.textContent = icon;\n            iconEl.style.marginRight = '0.5rem';\n            contentWrapper.appendChild(iconEl);\n        }\n        \n        // Add label\n        const label = this.getAttribute('label') || '';\n        if (label) {\n            const labelEl = document.createElement('span');\n            labelEl.className = 'collapsible-item__label';\n            labelEl.textContent = label;\n            contentWrapper.appendChild(labelEl);\n        }\n        \n        // Add the content wrapper to the header\n        header.appendChild(contentWrapper);\n                \n        return header;\n    }\n    \n    _render() {\n        // Prevent re-entrancy during rendering\n        if (!this._isRendering) {\n            this._isRendering = true;\n            \n            // Store any existing content that should be preserved\n            const existingContent = [];\n            Array.from(this.children).forEach(child => {\n                if (child !== this._header && child !== this._content) {\n                    existingContent.push(child);\n                }\n            });\n            \n            // Clear existing content\n            while (this.firstChild) {\n                this.removeChild(this.firstChild);\n            }\n            \n            // Create and append header\n            this._header = this._createHeader();\n            this.appendChild(this._header);\n            \n            // Set header attributes for accessibility\n            if (this._header) {\n                this._header.setAttribute('role', 'button');\n                this._header.setAttribute('aria-expanded', this._isExpanded ? 'true' : 'false');\n                this._header.setAttribute('tabindex', '0');\n                \n                // Add keyboard support\n                this._header.addEventListener('keydown', (e) => {\n                    if (e.key === 'Enter' || e.key === ' ') {\n                        e.preventDefault();\n                        this._toggleExpanded();\n                    }\n                });\n            }\n            \n            // Create and append content container\n            this._content = this._createContent();\n            if (this._content) {\n                this.appendChild(this._content);\n                \n                // Add back any existing content to the content container\n                existingContent.forEach(child => {\n                    this._content.appendChild(child);\n                });\n            }\n            \n            // Ensure proper ARIA attributes for accessibility\n            this.setAttribute('role', 'listitem');\n            \n            // Set initial content visibility\n            this._updateContentVisibility();\n            \n            // Mark as rendered\n            this.rendered = true;\n            this._isRendering = false;\n        }\n    }\n    \n    _createContent() {\n        const content = document.createElement('div');\n        content.className = 'collapsible-item__content';\n        \n        // Filter out any header elements and their content\n        const headerElements = this.querySelectorAll('.collapsible-item__header, .collapsible-item__label, .collapsible-item__icon');\n        const headerElementSet = new Set(headerElements);\n        \n        // Process direct children that are not part of the header\n        const filteredChildren = Array.from(this.childNodes).filter(node => {\n            // Keep only element nodes that are not in the header\n            if (node.nodeType === Node.ELEMENT_NODE) {\n                return !headerElementSet.has(node) && !node.closest('.collapsible-item__header');\n            }\n            // Keep text nodes that are not just whitespace\n            if (node.nodeType === Node.TEXT_NODE) {\n                return node.textContent.trim() !== '' && \n                       !node.textContent.includes('▶') && \n                       !node.textContent.includes('▼');\n            }\n            return false;\n        });\n        \n        // Add the filtered children to the content\n        filteredChildren.forEach(child => {\n            content.appendChild(child.cloneNode(true));\n        });\n        \n        return content;\n    }\n    \n    get expanded() {\n        return this._isExpanded;\n    }\n    \n    set expanded(value) {\n        if (this._isExpanded === value) return; // No change needed\n        \n        this._isExpanded = value;\n        \n        // Update the attribute to reflect the state in the DOM\n        if (this._isExpanded) {\n            this.setAttribute('expanded', '');\n        } else {\n            this.removeAttribute('expanded');\n        }\n        \n        // Update the content visibility immediately\n        this._updateContentVisibility();\n        \n        // Dispatch the toggle event\n        this.dispatchEvent(new CustomEvent('toggle', {\n            detail: { expanded: this._isExpanded },\n            bubbles: true,\n            composed: true\n        }));\n    }\n    \n    _toggleExpanded() {\n        this._isExpanded = !this._isExpanded;\n        \n        // Update the expanded attribute\n        if (this._isExpanded) {\n            this.setAttribute('expanded', '');\n        } else {\n            this.removeAttribute('expanded');\n        }\n        \n        // Update the UI\n        this._updateContentVisibility();\n        \n        // Dispatch the toggle event\n        this.dispatchEvent(new CustomEvent('toggle', {\n            detail: { expanded: this._isExpanded },\n            bubbles: true,\n            composed: true\n        }));\n    }\n    \n    _updateContentVisibility() {\n        if (!this._content || !this._header) return;\n        \n        const hideIcon = this.hasAttribute('hide-icon');\n        \n        if (this._isExpanded) {\n            this._content.classList.add('collapsible-item__content--expanded');\n            this._content.style.display = 'block';\n            this._header.setAttribute('aria-expanded', 'true');\n            this.classList.add('collapsible-item--expanded');\n            // Update icon to expanded state (down arrow) only if not hidden\n            if (!hideIcon) {\n                this.setAttribute('icon', '▼');\n            }\n        } else {\n            this._content.classList.remove('collapsible-item__content--expanded');\n            this._content.style.display = 'none';\n            this._header.setAttribute('aria-expanded', 'false');\n            this.classList.remove('collapsible-item--expanded');\n            // Update icon to collapsed state (right arrow) only if not hidden\n            if (!hideIcon) {\n                this.setAttribute('icon', '▶');\n            }\n        }\n    }\n    \n    attributeChangedCallback(name, oldValue, newValue) {\n        if (name === 'removeshift') {\n            this._removeShift = newValue !== null;\n            if (this._removeShift) {\n                this.classList.add('collapsible-item--no-padding');\n            } else {\n                this.classList.remove('collapsible-item--no-padding');\n            }\n        } else if (name === 'hide-icon' && this._header) {\n            // Handle hide-icon attribute changes\n            const iconEl = this._header.querySelector('.collapsible-item__icon');\n            if (newValue !== null) {\n                // hide-icon is set, remove the icon if it exists\n                if (iconEl) {\n                    iconEl.remove();\n                }\n            } else if (this.hasAttribute('icon')) {\n                // hide-icon is removed, add the icon back if we have an icon attribute\n                if (!iconEl) {\n                    const icon = this.getAttribute('icon');\n                    const newIconEl = document.createElement('span');\n                    newIconEl.className = 'collapsible-item__icon';\n                    newIconEl.textContent = icon;\n                    newIconEl.style.marginRight = '0.5rem';\n                    const contentWrapper = this._header.firstElementChild;\n                    if (contentWrapper) {\n                        contentWrapper.insertBefore(newIconEl, contentWrapper.firstChild);\n                    }\n                }\n            }\n        } else if (name === 'expanded') {\n            const wasExpanded = this._isExpanded;\n            this._isExpanded = newValue !== null;\n            \n            // Only update if the state actually changed\n            if (this._isExpanded !== wasExpanded) {\n                this._updateContentVisibility();\n            }\n        } else if (name === 'icon' && this._header) {\n            // Update the icon if it exists, or create it if it doesn't\n            let iconEl = this._header.querySelector('.collapsible-item__icon');\n            if (newValue) {\n                if (!iconEl) {\n                    iconEl = document.createElement('span');\n                    iconEl.className = 'collapsible-item__icon';\n                    this._header.insertBefore(iconEl, this._header.firstChild);\n                }\n                iconEl.textContent = newValue;\n            } else if (iconEl) {\n                this._header.removeChild(iconEl);\n            }\n        } else if (name === 'label' && this._header) {\n            // Update the label if it exists, or create it if it doesn't\n            let labelEl = this._header.querySelector('.collapsible-item__label');\n            if (labelEl) {\n                labelEl.textContent = newValue || '';\n            } else if (newValue) {\n                labelEl = document.createElement('span');\n                labelEl.className = 'collapsible-item__label';\n                labelEl.textContent = newValue;\n                this._header.appendChild(labelEl);\n            }\n        }\n    }\n}\n\n// Define the custom element with the correct name\nconst elementName = 'collapsible-item';\n\n// Check if the element is already defined and undefine it if necessary\nif (typeof window !== 'undefined' && window.customElements) {\n    // First, try to undefine the element if it exists\n    if (window.customElements.get(elementName)) {\n        const oldElement = window.customElements.get(elementName);\n        delete window.customElements._elements[elementName];\n    }\n    \n    // Define the element with the proper configuration\n    window.customElements.define(elementName, CollapsibleItem, { extends: 'li' });\n}","// Core components\nexport * from './molecules/collapsible-list/CollapsibleList.js';\nexport * from './molecules/collapsible-item/CollapsibleItem.js';\n\n// Additional components (dynamically imported when needed)\nlet additionalComponents = {};\n\n// Function to load additional components\nexport async function loadAdditionalComponents() {\n  try {\n    const selectionMenuModule = await import('./organisms/selection-menu/SelectionMenu.js');\n    additionalComponents.SelectionMenu = selectionMenuModule.default || selectionMenuModule;\n  } catch (e) {\n    console.warn('SelectionMenu component not found or failed to load', e);\n  }\n\n  try {\n    const productLayoutModule = await import('./templates/product-layout/ProductLayout.js');\n    additionalComponents.ProductLayout = productLayoutModule.default || productLayoutModule;\n  } catch (e) {\n    console.warn('ProductLayout component not found or failed to load', e);\n  }\n  \n  return additionalComponents;\n}\n\n// Export a function to get additional components\nexport function getAdditionalComponents() {\n  return additionalComponents;\n}\n","import { useEffect, useRef, forwardRef, useMemo } from 'react';\nimport * as webComponents from '../../components';\n\n/**\n * Creates a React wrapper for a web component\n * @param {string} componentName - The name of the component\n * @param {Function} webComponent - The web component constructor\n * @returns {Function} React component\n */\nconst createReactWrapper = (componentName, webComponent) => {\n  const ReactComponent = forwardRef(({ children, ...props }, ref) => {\n    const elementRef = useRef(null);\n    const eventHandlers = useRef({});\n    const tagName = webComponent.is || componentName.replace(/([a-z0-9])([A-Z])/g, '$1-$2').toLowerCase();\n\n    // Memoize props to prevent unnecessary effect runs\n    const { elementProps, eventListeners } = useMemo(() => {\n      const elementProps = {};\n      const eventListeners = {};\n\n      Object.entries(props).forEach(([key, value]) => {\n        if (typeof value === 'function' && key.startsWith('on')) {\n          const eventName = key.substring(2).toLowerCase();\n          eventListeners[eventName] = value;\n        } else if (key !== 'children') {\n          elementProps[key] = value;\n        }\n      });\n\n      return { elementProps, eventListeners };\n    }, [props]);\n\n    // Handle event listeners\n    useEffect(() => {\n      const element = elementRef.current;\n      if (!element) return;\n\n      const currentHandlers = {};\n\n      // Add new event listeners\n      Object.entries(eventListeners).forEach(([eventName, handler]) => {\n        const wrappedHandler = (event) => {\n          // Create a synthetic event-like object for better React compatibility\n          const syntheticEvent = {\n            ...event,\n            nativeEvent: event,\n            currentTarget: element,\n            target: event.target,\n            preventDefault() {\n              event.preventDefault();\n            },\n            stopPropagation() {\n              event.stopPropagation();\n            },\n          };\n\n          handler(syntheticEvent);\n        };\n\n        element.addEventListener(eventName, wrappedHandler);\n        currentHandlers[eventName] = wrappedHandler;\n      });\n\n      // Store current handlers for cleanup\n      const previousHandlers = eventHandlers.current;\n      eventHandlers.current = currentHandlers;\n\n      // Cleanup function\n      return () => {\n        // Remove only the handlers that are no longer needed\n        Object.entries(previousHandlers).forEach(([eventName, handler]) => {\n          if (currentHandlers[eventName] !== handler) {\n            element.removeEventListener(eventName, handler);\n          }\n        });\n      };\n    }, [eventListeners]);\n\n    // Handle ref forwarding\n    useEffect(() => {\n      if (!ref) return;\n      \n      if (typeof ref === 'function') {\n        ref(elementRef.current);\n      } else if (ref && typeof ref === 'object') {\n        ref.current = elementRef.current;\n      }\n    }, [ref]);\n\n    // Handle boolean attributes\n    const processedProps = useMemo(() => {\n      const result = { ...elementProps };\n      \n      // Convert boolean values to empty strings for web component boolean attributes\n      Object.keys(result).forEach(key => {\n        if (result[key] === true) {\n          result[key] = ''; // Empty string makes the attribute present without a value\n        } else if (result[key] === false || result[key] === null || result[key] === undefined) {\n          delete result[key]; // Remove falsy values to unset the attribute\n        }\n      });\n      \n      return result;\n    }, [elementProps]);\n\n    try {\n      return (\n        <tag-name is={tagName} ref={elementRef} {...processedProps}>\n          {children}\n        </tag-name>\n      );\n    } catch (error) {\n      console.error(`Error rendering ${componentName}:`, error);\n      return null;\n    }\n  });\n\n  // Set display name for better debugging\n  ReactComponent.displayName = componentName;\n  \n  // Add a reference to the original web component\n  ReactComponent.webComponent = webComponent;\n  \n  return ReactComponent;\n};\n\n// Auto-generate React wrappers for all web components\nconst wrappers = {};\n\nObject.entries(webComponents).forEach(([componentName, webComponent]) => {\n  if (typeof webComponent === 'function' && webComponent.name) {\n    try {\n      wrappers[componentName] = createReactWrapper(componentName, webComponent);\n    } catch (error) {\n      console.error(`Failed to create React wrapper for ${componentName}:`, error);\n    }\n  }\n});\n\n// Export individual components for better tree-shaking\nconst {\n  IconLabel,\n  CollapsibleItem,\n  CollapsibleList,\n  ImageCollection,\n  SelectionMenu,\n  ProductLayout,\n  ...restComponents\n} = wrappers;\n\n// Export all components as named exports\nexport { \n  IconLabel,\n  CollapsibleItem,\n  CollapsibleList,\n  ImageCollection,\n  SelectionMenu,\n  ProductLayout \n};\n\n// Export all components as default\nexport default wrappers;\n"],"names":["items","lists","CollapsibleList","IconLabel","CollapsibleItem","elementProps","eventListeners"],"mappings":"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"}