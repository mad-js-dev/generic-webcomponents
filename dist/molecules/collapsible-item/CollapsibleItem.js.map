{"version":3,"file":"CollapsibleItem.js","sources":["../../../src/components/molecules/collapsible-item/CollapsibleItem.js"],"sourcesContent":["/**\n * CollapsibleItem Component\n * A custom element that creates a collapsible list item\n * \n * @attr {boolean} expanded - Whether the item is expanded or collapsed\n * @attr {string} icon - Optional icon to display next to the label\n * @attr {string} label - The text label for the collapsible item\n * @attr {boolean} removeshift - If true, removes the left padding from the content area\n */\n\nimport { IconLabel } from '../../atoms/icon-label/IconLabel.js';\n\n// Import regular CSS\nimport './CollapsibleItem.css';\n\nexport class CollapsibleItem extends HTMLLIElement {\n    static get observedAttributes() {\n        return ['expanded', 'icon', 'label', 'removeshift', 'hide-icon'];\n    }\n    \n    constructor() {\n        super();\n        this._isExpanded = false;\n        this._handleClick = this._handleClick.bind(this);\n        this._header = null;\n        this._content = null;\n        this._initialRender = true;\n        this._removeShift = false;\n        this.rendered = false;\n        \n        // Add base class to the host element\n        this.classList.add('collapsible-item');\n        \n        // Initialize expanded state\n        if (this.hasAttribute('expanded')) {\n            this._isExpanded = true;\n            this.classList.add('collapsible-item--expanded');\n        }\n        \n        // Initialize no-padding state\n        if (this.hasAttribute('removeshift')) {\n            this.classList.add('collapsible-item--no-padding');\n        }\n    }\n\n    connectedCallback() {\n        // Ensure the component has the correct role for accessibility\n        if (!this.hasAttribute('role')) {\n            this.setAttribute('role', 'listitem');\n        }\n        \n        // Set up the component if not already rendered\n        if (!this.rendered) {\n            this._render();\n            this.rendered = true;\n            this._addEventListeners();\n            \n            // Ensure the content visibility is set correctly based on the expanded state\n            this._updateContentVisibility();\n        }\n        \n        // Ensure the component is properly styled\n        this.classList.add('collapsible-item');\n        \n        // Set initial expanded state\n        if (this.hasAttribute('expanded')) {\n            this._isExpanded = true;\n            this.classList.add('collapsible-item--expanded');\n        } else {\n            this._isExpanded = false;\n            this.classList.remove('collapsible-item--expanded');\n        }\n    }\n    \n    disconnectedCallback() {\n        this._removeEventListeners();\n    }\n    \n    _addEventListeners() {\n        // Add click listener to the component itself for event delegation\n        this.addEventListener('click', this._handleClick);\n    }\n    \n    _removeEventListeners() {\n        this.removeEventListener('click', this._handleClick);\n    }\n    \n    _handleClick(event) {\n        // Find the closest header from the click target\n        const header = event.target.closest('.collapsible-item__header');\n        if (!header) return; // Not a header click\n        \n        // Prevent the default action to avoid any native behavior\n        event.preventDefault();\n        event.stopPropagation();\n        \n        // Toggle the expanded state\n        const isExpanding = !this.hasAttribute('expanded');\n        \n        // Update the expanded attribute\n        if (isExpanding) {\n            this.setAttribute('expanded', '');\n        } else {\n            this.removeAttribute('expanded');\n        }\n        \n        // Update the internal state and UI\n        this._isExpanded = isExpanding;\n        this._updateContentVisibility();\n        \n        // Dispatch a custom event\n        this.dispatchEvent(new CustomEvent('toggle', {\n            detail: { expanded: isExpanding },\n            bubbles: true,\n            composed: true\n        }));\n    }\n    \n    _createHeader() {\n        const header = document.createElement('div');\n        header.className = 'collapsible-item__header';\n        \n        // Create a container for the icon and label\n        const contentWrapper = document.createElement('div');\n        contentWrapper.style.display = 'flex';\n        contentWrapper.style.alignItems = 'center';\n        contentWrapper.style.flex = '1';\n        \n        // Add icon if provided and not hidden\n        const hideIcon = this.hasAttribute('hide-icon');\n        const icon = this.getAttribute('icon');\n        if (icon && !hideIcon) {\n            const iconEl = document.createElement('span');\n            iconEl.className = 'collapsible-item__icon';\n            iconEl.textContent = icon;\n            iconEl.style.marginRight = '0.5rem';\n            contentWrapper.appendChild(iconEl);\n        }\n        \n        // Add label\n        const label = this.getAttribute('label') || '';\n        if (label) {\n            const labelEl = document.createElement('span');\n            labelEl.className = 'collapsible-item__label';\n            labelEl.textContent = label;\n            contentWrapper.appendChild(labelEl);\n        }\n        \n        // Add the content wrapper to the header\n        header.appendChild(contentWrapper);\n                \n        return header;\n    }\n    \n    _render() {\n        // Prevent re-entrancy during rendering\n        if (!this._isRendering) {\n            this._isRendering = true;\n            \n            // Store any existing content that should be preserved\n            const existingContent = [];\n            Array.from(this.children).forEach(child => {\n                if (child !== this._header && child !== this._content) {\n                    existingContent.push(child);\n                }\n            });\n            \n            // Clear existing content\n            while (this.firstChild) {\n                this.removeChild(this.firstChild);\n            }\n            \n            // Create and append header\n            this._header = this._createHeader();\n            this.appendChild(this._header);\n            \n            // Set header attributes for accessibility\n            if (this._header) {\n                this._header.setAttribute('role', 'button');\n                this._header.setAttribute('aria-expanded', this._isExpanded ? 'true' : 'false');\n                this._header.setAttribute('tabindex', '0');\n                \n                // Add keyboard support\n                this._header.addEventListener('keydown', (e) => {\n                    if (e.key === 'Enter' || e.key === ' ') {\n                        e.preventDefault();\n                        this._toggleExpanded();\n                    }\n                });\n            }\n            \n            // Create and append content container\n            this._content = this._createContent();\n            if (this._content) {\n                this.appendChild(this._content);\n                \n                // Add back any existing content to the content container\n                existingContent.forEach(child => {\n                    this._content.appendChild(child);\n                });\n            }\n            \n            // Ensure proper ARIA attributes for accessibility\n            this.setAttribute('role', 'listitem');\n            \n            // Set initial content visibility\n            this._updateContentVisibility();\n            \n            // Mark as rendered\n            this.rendered = true;\n            this._isRendering = false;\n        }\n    }\n    \n    _createContent() {\n        const content = document.createElement('div');\n        content.className = 'collapsible-item__content';\n        \n        // Filter out any header elements and their content\n        const headerElements = this.querySelectorAll('.collapsible-item__header, .collapsible-item__label, .collapsible-item__icon');\n        const headerElementSet = new Set(headerElements);\n        \n        // Process direct children that are not part of the header\n        const filteredChildren = Array.from(this.childNodes).filter(node => {\n            // Keep only element nodes that are not in the header\n            if (node.nodeType === Node.ELEMENT_NODE) {\n                return !headerElementSet.has(node) && !node.closest('.collapsible-item__header');\n            }\n            // Keep text nodes that are not just whitespace\n            if (node.nodeType === Node.TEXT_NODE) {\n                return node.textContent.trim() !== '' && \n                       !node.textContent.includes('▶') && \n                       !node.textContent.includes('▼');\n            }\n            return false;\n        });\n        \n        // Add the filtered children to the content\n        filteredChildren.forEach(child => {\n            content.appendChild(child.cloneNode(true));\n        });\n        \n        return content;\n    }\n    \n    get expanded() {\n        return this._isExpanded;\n    }\n    \n    set expanded(value) {\n        if (this._isExpanded === value) return; // No change needed\n        \n        this._isExpanded = value;\n        \n        // Update the attribute to reflect the state in the DOM\n        if (this._isExpanded) {\n            this.setAttribute('expanded', '');\n        } else {\n            this.removeAttribute('expanded');\n        }\n        \n        // Update the content visibility immediately\n        this._updateContentVisibility();\n        \n        // Dispatch the toggle event\n        this.dispatchEvent(new CustomEvent('toggle', {\n            detail: { expanded: this._isExpanded },\n            bubbles: true,\n            composed: true\n        }));\n    }\n    \n    _toggleExpanded() {\n        this._isExpanded = !this._isExpanded;\n        \n        // Update the expanded attribute\n        if (this._isExpanded) {\n            this.setAttribute('expanded', '');\n        } else {\n            this.removeAttribute('expanded');\n        }\n        \n        // Update the UI\n        this._updateContentVisibility();\n        \n        // Dispatch the toggle event\n        this.dispatchEvent(new CustomEvent('toggle', {\n            detail: { expanded: this._isExpanded },\n            bubbles: true,\n            composed: true\n        }));\n    }\n    \n    _updateContentVisibility() {\n        if (!this._content || !this._header) return;\n        \n        const hideIcon = this.hasAttribute('hide-icon');\n        \n        if (this._isExpanded) {\n            this._content.classList.add('collapsible-item__content--expanded');\n            this._content.style.display = 'block';\n            this._header.setAttribute('aria-expanded', 'true');\n            this.classList.add('collapsible-item--expanded');\n            // Update icon to expanded state (down arrow) only if not hidden\n            if (!hideIcon) {\n                this.setAttribute('icon', '▼');\n            }\n        } else {\n            this._content.classList.remove('collapsible-item__content--expanded');\n            this._content.style.display = 'none';\n            this._header.setAttribute('aria-expanded', 'false');\n            this.classList.remove('collapsible-item--expanded');\n            // Update icon to collapsed state (right arrow) only if not hidden\n            if (!hideIcon) {\n                this.setAttribute('icon', '▶');\n            }\n        }\n    }\n    \n    attributeChangedCallback(name, oldValue, newValue) {\n        if (name === 'removeshift') {\n            this._removeShift = newValue !== null;\n            if (this._removeShift) {\n                this.classList.add('collapsible-item--no-padding');\n            } else {\n                this.classList.remove('collapsible-item--no-padding');\n            }\n        } else if (name === 'hide-icon' && this._header) {\n            // Handle hide-icon attribute changes\n            const iconEl = this._header.querySelector('.collapsible-item__icon');\n            if (newValue !== null) {\n                // hide-icon is set, remove the icon if it exists\n                if (iconEl) {\n                    iconEl.remove();\n                }\n            } else if (this.hasAttribute('icon')) {\n                // hide-icon is removed, add the icon back if we have an icon attribute\n                if (!iconEl) {\n                    const icon = this.getAttribute('icon');\n                    const newIconEl = document.createElement('span');\n                    newIconEl.className = 'collapsible-item__icon';\n                    newIconEl.textContent = icon;\n                    newIconEl.style.marginRight = '0.5rem';\n                    const contentWrapper = this._header.firstElementChild;\n                    if (contentWrapper) {\n                        contentWrapper.insertBefore(newIconEl, contentWrapper.firstChild);\n                    }\n                }\n            }\n        } else if (name === 'expanded') {\n            const wasExpanded = this._isExpanded;\n            this._isExpanded = newValue !== null;\n            \n            // Only update if the state actually changed\n            if (this._isExpanded !== wasExpanded) {\n                this._updateContentVisibility();\n            }\n        } else if (name === 'icon' && this._header) {\n            // Update the icon if it exists, or create it if it doesn't\n            let iconEl = this._header.querySelector('.collapsible-item__icon');\n            if (newValue) {\n                if (!iconEl) {\n                    iconEl = document.createElement('span');\n                    iconEl.className = 'collapsible-item__icon';\n                    this._header.insertBefore(iconEl, this._header.firstChild);\n                }\n                iconEl.textContent = newValue;\n            } else if (iconEl) {\n                this._header.removeChild(iconEl);\n            }\n        } else if (name === 'label' && this._header) {\n            // Update the label if it exists, or create it if it doesn't\n            let labelEl = this._header.querySelector('.collapsible-item__label');\n            if (labelEl) {\n                labelEl.textContent = newValue || '';\n            } else if (newValue) {\n                labelEl = document.createElement('span');\n                labelEl.className = 'collapsible-item__label';\n                labelEl.textContent = newValue;\n                this._header.appendChild(labelEl);\n            }\n        }\n    }\n}\n\n// Define the custom element with the correct name\nconst elementName = 'collapsible-item';\n\n// Check if the element is already defined and undefine it if necessary\nif (typeof window !== 'undefined' && window.customElements) {\n    // First, try to undefine the element if it exists\n    if (window.customElements.get(elementName)) {\n        const oldElement = window.customElements.get(elementName);\n        delete window.customElements._elements[elementName];\n    }\n    \n    // Define the element with the proper configuration\n    window.customElements.define(elementName, CollapsibleItem, { extends: 'li' });\n}"],"names":[],"mappings":";;AAeO,MAAM,wBAAwB,cAAc;AAAA,EAC/C,WAAW,qBAAqB;AAC5B,WAAO,CAAC,YAAY,QAAQ,SAAS,eAAe,WAAW;AAAA,EACvE;AAAA,EAEI,cAAc;AACV,UAAO;AACP,SAAK,cAAc;AACnB,SAAK,eAAe,KAAK,aAAa,KAAK,IAAI;AAC/C,SAAK,UAAU;AACf,SAAK,WAAW;AAChB,SAAK,iBAAiB;AACtB,SAAK,eAAe;AACpB,SAAK,WAAW;AAGhB,SAAK,UAAU,IAAI,kBAAkB;AAGrC,QAAI,KAAK,aAAa,UAAU,GAAG;AAC/B,WAAK,cAAc;AACnB,WAAK,UAAU,IAAI,4BAA4B;AAAA,IAC3D;AAGQ,QAAI,KAAK,aAAa,aAAa,GAAG;AAClC,WAAK,UAAU,IAAI,8BAA8B;AAAA,IAC7D;AAAA,EACA;AAAA,EAEI,oBAAoB;AAEhB,QAAI,CAAC,KAAK,aAAa,MAAM,GAAG;AAC5B,WAAK,aAAa,QAAQ,UAAU;AAAA,IAChD;AAGQ,QAAI,CAAC,KAAK,UAAU;AAChB,WAAK,QAAS;AACd,WAAK,WAAW;AAChB,WAAK,mBAAoB;AAGzB,WAAK,yBAA0B;AAAA,IAC3C;AAGQ,SAAK,UAAU,IAAI,kBAAkB;AAGrC,QAAI,KAAK,aAAa,UAAU,GAAG;AAC/B,WAAK,cAAc;AACnB,WAAK,UAAU,IAAI,4BAA4B;AAAA,IAC3D,OAAe;AACH,WAAK,cAAc;AACnB,WAAK,UAAU,OAAO,4BAA4B;AAAA,IAC9D;AAAA,EACA;AAAA,EAEI,uBAAuB;AACnB,SAAK,sBAAuB;AAAA,EACpC;AAAA,EAEI,qBAAqB;AAEjB,SAAK,iBAAiB,SAAS,KAAK,YAAY;AAAA,EACxD;AAAA,EAEI,wBAAwB;AACpB,SAAK,oBAAoB,SAAS,KAAK,YAAY;AAAA,EAC3D;AAAA,EAEI,aAAa,OAAO;AAEhB,UAAM,SAAS,MAAM,OAAO,QAAQ,2BAA2B;AAC/D,QAAI,CAAC,OAAQ;AAGb,UAAM,eAAgB;AACtB,UAAM,gBAAiB;AAGvB,UAAM,cAAc,CAAC,KAAK,aAAa,UAAU;AAGjD,QAAI,aAAa;AACb,WAAK,aAAa,YAAY,EAAE;AAAA,IAC5C,OAAe;AACH,WAAK,gBAAgB,UAAU;AAAA,IAC3C;AAGQ,SAAK,cAAc;AACnB,SAAK,yBAA0B;AAG/B,SAAK,cAAc,IAAI,YAAY,UAAU;AAAA,MACzC,QAAQ,EAAE,UAAU,YAAa;AAAA,MACjC,SAAS;AAAA,MACT,UAAU;AAAA,IACtB,CAAS,CAAC;AAAA,EACV;AAAA,EAEI,gBAAgB;AACZ,UAAM,SAAS,SAAS,cAAc,KAAK;AAC3C,WAAO,YAAY;AAGnB,UAAM,iBAAiB,SAAS,cAAc,KAAK;AACnD,mBAAe,MAAM,UAAU;AAC/B,mBAAe,MAAM,aAAa;AAClC,mBAAe,MAAM,OAAO;AAG5B,UAAM,WAAW,KAAK,aAAa,WAAW;AAC9C,UAAM,OAAO,KAAK,aAAa,MAAM;AACrC,QAAI,QAAQ,CAAC,UAAU;AACnB,YAAM,SAAS,SAAS,cAAc,MAAM;AAC5C,aAAO,YAAY;AACnB,aAAO,cAAc;AACrB,aAAO,MAAM,cAAc;AAC3B,qBAAe,YAAY,MAAM;AAAA,IAC7C;AAGQ,UAAM,QAAQ,KAAK,aAAa,OAAO,KAAK;AAC5C,QAAI,OAAO;AACP,YAAM,UAAU,SAAS,cAAc,MAAM;AAC7C,cAAQ,YAAY;AACpB,cAAQ,cAAc;AACtB,qBAAe,YAAY,OAAO;AAAA,IAC9C;AAGQ,WAAO,YAAY,cAAc;AAEjC,WAAO;AAAA,EACf;AAAA,EAEI,UAAU;AAEN,QAAI,CAAC,KAAK,cAAc;AACpB,WAAK,eAAe;AAGpB,YAAM,kBAAkB,CAAE;AAC1B,YAAM,KAAK,KAAK,QAAQ,EAAE,QAAQ,WAAS;AACvC,YAAI,UAAU,KAAK,WAAW,UAAU,KAAK,UAAU;AACnD,0BAAgB,KAAK,KAAK;AAAA,QAC9C;AAAA,MACA,CAAa;AAGD,aAAO,KAAK,YAAY;AACpB,aAAK,YAAY,KAAK,UAAU;AAAA,MAChD;AAGY,WAAK,UAAU,KAAK,cAAe;AACnC,WAAK,YAAY,KAAK,OAAO;AAG7B,UAAI,KAAK,SAAS;AACd,aAAK,QAAQ,aAAa,QAAQ,QAAQ;AAC1C,aAAK,QAAQ,aAAa,iBAAiB,KAAK,cAAc,SAAS,OAAO;AAC9E,aAAK,QAAQ,aAAa,YAAY,GAAG;AAGzC,aAAK,QAAQ,iBAAiB,WAAW,CAAC,MAAM;AAC5C,cAAI,EAAE,QAAQ,WAAW,EAAE,QAAQ,KAAK;AACpC,cAAE,eAAgB;AAClB,iBAAK,gBAAiB;AAAA,UAC9C;AAAA,QACA,CAAiB;AAAA,MACjB;AAGY,WAAK,WAAW,KAAK,eAAgB;AACrC,UAAI,KAAK,UAAU;AACf,aAAK,YAAY,KAAK,QAAQ;AAG9B,wBAAgB,QAAQ,WAAS;AAC7B,eAAK,SAAS,YAAY,KAAK;AAAA,QACnD,CAAiB;AAAA,MACjB;AAGY,WAAK,aAAa,QAAQ,UAAU;AAGpC,WAAK,yBAA0B;AAG/B,WAAK,WAAW;AAChB,WAAK,eAAe;AAAA,IAChC;AAAA,EACA;AAAA,EAEI,iBAAiB;AACb,UAAM,UAAU,SAAS,cAAc,KAAK;AAC5C,YAAQ,YAAY;AAGpB,UAAM,iBAAiB,KAAK,iBAAiB,8EAA8E;AAC3H,UAAM,mBAAmB,IAAI,IAAI,cAAc;AAG/C,UAAM,mBAAmB,MAAM,KAAK,KAAK,UAAU,EAAE,OAAO,UAAQ;AAEhE,UAAI,KAAK,aAAa,KAAK,cAAc;AACrC,eAAO,CAAC,iBAAiB,IAAI,IAAI,KAAK,CAAC,KAAK,QAAQ,2BAA2B;AAAA,MAC/F;AAEY,UAAI,KAAK,aAAa,KAAK,WAAW;AAClC,eAAO,KAAK,YAAY,KAAI,MAAO,MAC5B,CAAC,KAAK,YAAY,SAAS,GAAG,KAC9B,CAAC,KAAK,YAAY,SAAS,GAAG;AAAA,MACrD;AACY,aAAO;AAAA,IACnB,CAAS;AAGD,qBAAiB,QAAQ,WAAS;AAC9B,cAAQ,YAAY,MAAM,UAAU,IAAI,CAAC;AAAA,IACrD,CAAS;AAED,WAAO;AAAA,EACf;AAAA,EAEI,IAAI,WAAW;AACX,WAAO,KAAK;AAAA,EACpB;AAAA,EAEI,IAAI,SAAS,OAAO;AAChB,QAAI,KAAK,gBAAgB,MAAO;AAEhC,SAAK,cAAc;AAGnB,QAAI,KAAK,aAAa;AAClB,WAAK,aAAa,YAAY,EAAE;AAAA,IAC5C,OAAe;AACH,WAAK,gBAAgB,UAAU;AAAA,IAC3C;AAGQ,SAAK,yBAA0B;AAG/B,SAAK,cAAc,IAAI,YAAY,UAAU;AAAA,MACzC,QAAQ,EAAE,UAAU,KAAK,YAAa;AAAA,MACtC,SAAS;AAAA,MACT,UAAU;AAAA,IACtB,CAAS,CAAC;AAAA,EACV;AAAA,EAEI,kBAAkB;AACd,SAAK,cAAc,CAAC,KAAK;AAGzB,QAAI,KAAK,aAAa;AAClB,WAAK,aAAa,YAAY,EAAE;AAAA,IAC5C,OAAe;AACH,WAAK,gBAAgB,UAAU;AAAA,IAC3C;AAGQ,SAAK,yBAA0B;AAG/B,SAAK,cAAc,IAAI,YAAY,UAAU;AAAA,MACzC,QAAQ,EAAE,UAAU,KAAK,YAAa;AAAA,MACtC,SAAS;AAAA,MACT,UAAU;AAAA,IACtB,CAAS,CAAC;AAAA,EACV;AAAA,EAEI,2BAA2B;AACvB,QAAI,CAAC,KAAK,YAAY,CAAC,KAAK,QAAS;AAErC,UAAM,WAAW,KAAK,aAAa,WAAW;AAE9C,QAAI,KAAK,aAAa;AAClB,WAAK,SAAS,UAAU,IAAI,qCAAqC;AACjE,WAAK,SAAS,MAAM,UAAU;AAC9B,WAAK,QAAQ,aAAa,iBAAiB,MAAM;AACjD,WAAK,UAAU,IAAI,4BAA4B;AAE/C,UAAI,CAAC,UAAU;AACX,aAAK,aAAa,QAAQ,GAAG;AAAA,MAC7C;AAAA,IACA,OAAe;AACH,WAAK,SAAS,UAAU,OAAO,qCAAqC;AACpE,WAAK,SAAS,MAAM,UAAU;AAC9B,WAAK,QAAQ,aAAa,iBAAiB,OAAO;AAClD,WAAK,UAAU,OAAO,4BAA4B;AAElD,UAAI,CAAC,UAAU;AACX,aAAK,aAAa,QAAQ,GAAG;AAAA,MAC7C;AAAA,IACA;AAAA,EACA;AAAA,EAEI,yBAAyB,MAAM,UAAU,UAAU;AAC/C,QAAI,SAAS,eAAe;AACxB,WAAK,eAAe,aAAa;AACjC,UAAI,KAAK,cAAc;AACnB,aAAK,UAAU,IAAI,8BAA8B;AAAA,MACjE,OAAmB;AACH,aAAK,UAAU,OAAO,8BAA8B;AAAA,MACpE;AAAA,IACS,WAAU,SAAS,eAAe,KAAK,SAAS;AAE7C,YAAM,SAAS,KAAK,QAAQ,cAAc,yBAAyB;AACnE,UAAI,aAAa,MAAM;AAEnB,YAAI,QAAQ;AACR,iBAAO,OAAQ;AAAA,QACnC;AAAA,MACa,WAAU,KAAK,aAAa,MAAM,GAAG;AAElC,YAAI,CAAC,QAAQ;AACT,gBAAM,OAAO,KAAK,aAAa,MAAM;AACrC,gBAAM,YAAY,SAAS,cAAc,MAAM;AAC/C,oBAAU,YAAY;AACtB,oBAAU,cAAc;AACxB,oBAAU,MAAM,cAAc;AAC9B,gBAAM,iBAAiB,KAAK,QAAQ;AACpC,cAAI,gBAAgB;AAChB,2BAAe,aAAa,WAAW,eAAe,UAAU;AAAA,UACxF;AAAA,QACA;AAAA,MACA;AAAA,IACA,WAAmB,SAAS,YAAY;AAC5B,YAAM,cAAc,KAAK;AACzB,WAAK,cAAc,aAAa;AAGhC,UAAI,KAAK,gBAAgB,aAAa;AAClC,aAAK,yBAA0B;AAAA,MAC/C;AAAA,IACS,WAAU,SAAS,UAAU,KAAK,SAAS;AAExC,UAAI,SAAS,KAAK,QAAQ,cAAc,yBAAyB;AACjE,UAAI,UAAU;AACV,YAAI,CAAC,QAAQ;AACT,mBAAS,SAAS,cAAc,MAAM;AACtC,iBAAO,YAAY;AACnB,eAAK,QAAQ,aAAa,QAAQ,KAAK,QAAQ,UAAU;AAAA,QAC7E;AACgB,eAAO,cAAc;AAAA,MACxB,WAAU,QAAQ;AACf,aAAK,QAAQ,YAAY,MAAM;AAAA,MAC/C;AAAA,IACS,WAAU,SAAS,WAAW,KAAK,SAAS;AAEzC,UAAI,UAAU,KAAK,QAAQ,cAAc,0BAA0B;AACnE,UAAI,SAAS;AACT,gBAAQ,cAAc,YAAY;AAAA,MACrC,WAAU,UAAU;AACjB,kBAAU,SAAS,cAAc,MAAM;AACvC,gBAAQ,YAAY;AACpB,gBAAQ,cAAc;AACtB,aAAK,QAAQ,YAAY,OAAO;AAAA,MAChD;AAAA,IACA;AAAA,EACA;AACA;AAGA,MAAM,cAAc;AAGpB,IAAI,OAAO,WAAW,eAAe,OAAO,gBAAgB;AAExD,MAAI,OAAO,eAAe,IAAI,WAAW,GAAG;AACrB,WAAO,eAAe,IAAI,WAAW;AACxD,WAAO,OAAO,eAAe,UAAU,WAAW;AAAA,EAC1D;AAGI,SAAO,eAAe,OAAO,aAAa,iBAAiB,EAAE,SAAS,MAAM;AAChF;"}