{"version":3,"file":"CollapsibleList.js","sources":["../../../src/components/molecules/collapsible-list/CollapsibleList.js"],"sourcesContent":["/**\r\n * CollapsibleList Component\r\n * A custom element that creates a collapsible list container\r\n */\r\n\r\nexport class CollapsibleList extends HTMLElement {\r\n  static get observedAttributes() {\r\n    return ['reverse-heading', 'single-item', 'accordion'];\r\n  }\r\n  \r\n  constructor() {\r\n    super();\r\n    this.attachShadow({ mode: 'open' });\r\n    this._isUpdating = false; // Track if we're currently updating to prevent reentrant calls\r\n    this._handleItemToggle = this._handleItemToggle.bind(this);\r\n    \r\n    const container = document.createElement('div');\r\n    const slot = document.createElement('slot');\r\n    \r\n    // Create styles for the component\r\n    const style = document.createElement('style');\r\n    style.textContent = `\r\n      :host {\r\n        display: block;\r\n        width: 100%;\r\n        --indent-size: 1.5rem;\r\n      }\r\n      \r\n      ::slotted(collapsible-item) {\r\n        display: block;\r\n        margin: 0.25rem 0;\r\n        padding: 0;\r\n        width: 100%;\r\n      }\r\n      \r\n      /* Nested lists should have a border */\r\n      ::slotted(collapsible-list) {\r\n        border-left: 1px solid #e0e0e0;\r\n        margin-left: 0.5rem;\r\n        padding-left: 0.5rem;\r\n      }\r\n      \r\n      /* Style for the header in collapsible items */\r\n      .collapsible-item__header {\r\n        display: flex;\r\n        align-items: center;\r\n        width: 100%;\r\n        flex-direction: row;\r\n      }\r\n      \r\n      /* Toggle container styles */\r\n      .collapsible-item__toggle-container {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        width: var(--toggle-size, 24px);\r\n        height: var(--toggle-size, 24px);\r\n        margin: var(--toggle-margin, 0 8px 0 0);\r\n        flex-shrink: 0;\r\n      }`;\r\n    \r\n    container.appendChild(slot);\r\n    this.shadowRoot.append(style, container);\r\n  }\r\n  \r\n  async connectedCallback() {\r\n    if (!this._initialized) {\r\n      this._initializeComponent();\r\n      this._initialized = true;\r\n      \r\n      // Set initial reverse heading state\r\n      await this._updateReverseHeading();\r\n      \r\n      // Set up event listeners for accordion behavior\r\n      this.addEventListener('toggle', this._handleItemToggle);\r\n      \r\n      // Ensure at least one item is expanded in accordion mode\r\n      if (this.hasAttribute('accordion')) {\r\n        this._ensureOneItemExpanded();\r\n      }\r\n    }\r\n    \r\n    // Set up mutation observer for dynamic content\r\n    this._setupMutationObserver();\r\n  }\r\n  \r\n  _initializeComponent() {\r\n    if (!this.hasAttribute('role')) {\r\n      this.setAttribute('role', 'list');\r\n    }\r\n    \r\n    if (!this.hasAttribute('aria-label') && !this.hasAttribute('aria-labelledby')) {\r\n      console.warn('collapsible-list: Add an aria-label or aria-labelledby attribute for accessibility');\r\n    }\r\n  }\r\n  \r\n  _setupMutationObserver() {\r\n    // Set up a mutation observer to handle dynamically added items and attribute changes\r\n    this._observer = new MutationObserver(async (mutations) => {\r\n      let shouldUpdate = false;\r\n      \r\n      for (const mutation of mutations) {\r\n        if (mutation.type === 'attributes' && mutation.attributeName === 'reverse-heading') {\r\n          shouldUpdate = true;\r\n          break;\r\n        } else if (mutation.type === 'childList') {\r\n          // Check if any added nodes are collapsible items or lists\r\n          for (const node of mutation.addedNodes) {\r\n            if (node.nodeType === Node.ELEMENT_NODE && \r\n                (node.matches('collapsible-item') || node.matches('collapsible-list'))) {\r\n              shouldUpdate = true;\r\n              break;\r\n            }\r\n          }\r\n          if (shouldUpdate) break;\r\n        }\r\n      }\r\n      \r\n      if (shouldUpdate) {\r\n        await this._updateReverseHeading();\r\n      }\r\n    });\r\n    \r\n    // Start observing the component for attribute changes and child list changes\r\n    this._observer.observe(this, {\r\n      attributes: true,\r\n      attributeFilter: ['reverse-heading'],\r\n      childList: true,\r\n      subtree: true\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Updates the reverse heading state for all child collapsible items\r\n   * @private\r\n   */\r\n  async _updateReverseHeading() {\r\n    // Prevent reentrant calls\r\n    if (this._isUpdating) return;\r\n    this._isUpdating = true;\r\n    \r\n    try {\r\n      const isReversed = this.hasAttribute('reverse-heading') && \r\n                       this.getAttribute('reverse-heading') !== 'false';\r\n      \r\n      // Temporarily disconnect observer to prevent infinite loop\r\n      if (this._observer) {\r\n        this._observer.disconnect();\r\n      }\r\n      \r\n      // Process direct child collapsible-items\r\n      const processItems = async (items) => {\r\n        for (const item of items) {\r\n          // Set the attribute on the item\r\n          if (isReversed) {\r\n            item.setAttribute('reverse-heading', '');\r\n          } else {\r\n            item.removeAttribute('reverse-heading');\r\n          }\r\n          \r\n          // Process any nested items in this item (only direct children)\r\n          const nestedItems = item.querySelectorAll(':scope > collapsible-item');\r\n          if (nestedItems.length > 0) {\r\n            await processItems(Array.from(nestedItems));\r\n          }\r\n          \r\n          // Process any nested lists in this item (only direct children)\r\n          const nestedLists = item.querySelectorAll(':scope > collapsible-list');\r\n          if (nestedLists.length > 0) {\r\n            await processLists(Array.from(nestedLists));\r\n          }\r\n        }\r\n      };\r\n      \r\n      // Process nested collapsible-lists\r\n      const processLists = async (lists) => {\r\n        for (const list of lists) {\r\n          // Skip if this is the current list to prevent cycles\r\n          if (list === this) continue;\r\n          \r\n          // Set the attribute on the list\r\n          if (isReversed) {\r\n            list.setAttribute('reverse-heading', '');\r\n          } else {\r\n            list.removeAttribute('reverse-heading');\r\n          }\r\n          \r\n          // Process any direct child items in this list\r\n          const nestedItems = list.querySelectorAll(':scope > collapsible-item');\r\n          if (nestedItems.length > 0) {\r\n            await processItems(Array.from(nestedItems));\r\n          }\r\n          \r\n          // Process any direct child lists\r\n          const nestedLists = list.querySelectorAll(':scope > collapsible-list');\r\n          if (nestedLists.length > 0) {\r\n            await processLists(Array.from(nestedLists));\r\n          }\r\n        }\r\n      };\r\n      \r\n      // Start processing from the current element\r\n      const items = this.querySelectorAll(':scope > collapsible-item');\r\n      if (items.length > 0) {\r\n        await processItems(Array.from(items));\r\n      }\r\n      \r\n      const lists = this.querySelectorAll(':scope > collapsible-list');\r\n      if (lists.length > 0) {\r\n        await processLists(Array.from(lists));\r\n      }\r\n      \r\n      // Force a reflow to ensure all attribute changes are applied\r\n      if (this.shadowRoot) {\r\n        this.shadowRoot.offsetHeight; // This forces a reflow\r\n      }\r\n    } catch (error) {\r\n      console.error('Error updating reverse heading:', error);\r\n    } finally {\r\n      // Reconnect observer if it exists\r\n      if (this._observer) {\r\n        this._observer.observe(this, {\r\n          attributes: true,\r\n          attributeFilter: ['reverse-heading'],\r\n          childList: true,\r\n          subtree: true\r\n        });\r\n      }\r\n      this._isUpdating = false;\r\n    }\r\n  }\r\n\r\n  _handleItemToggle(e) {\r\n    if (this._isUpdating) return;\r\n    \r\n    const target = e.target;\r\n    \r\n    // Only process if this is a direct child\r\n    if (target.parentElement === this) {\r\n      this._isUpdating = true;\r\n      \r\n      if (this.hasAttribute('accordion')) {\r\n        // In accordion mode, close other items when one is opened\r\n        if (target.expanded) {\r\n          this._closeOtherItems(target);\r\n        }\r\n      } else if (this.hasAttribute('single-item')) {\r\n        // In single-item mode, just close other items when one is opened\r\n        if (target.expanded) {\r\n          this._closeOtherItems(target);\r\n        }\r\n      }\r\n      \r\n      this._isUpdating = false;\r\n    }\r\n  }\r\n  \r\n  _closeOtherItems(exceptItem) {\r\n    // Don't close items if inside an image-collection\r\n    if (this.closest('image-collection')) {\r\n      return;\r\n    }\r\n    \r\n    const items = this.querySelectorAll('collapsible-item');\r\n    items.forEach(item => {\r\n      if (item !== exceptItem) {\r\n        item.expanded = false;\r\n      }\r\n    });\r\n  }\r\n  \r\n  _getOpenItems() {\r\n    return Array.from(this.querySelectorAll('collapsible-item[expanded]'));\r\n  }\r\n  \r\n  _ensureOneItemExpanded() {\r\n    if (!this.hasAttribute('accordion')) return;\r\n    \r\n    const openItems = this._getOpenItems();\r\n    if (openItems.length === 0) {\r\n      // If no items are open, open the first one\r\n      const firstItem = this.querySelector('collapsible-item');\r\n      if (firstItem) {\r\n        firstItem.setAttribute('expanded', '');\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Define the custom element\r\nif (!customElements.get('collapsible-list')) {\r\n  customElements.define('collapsible-list', CollapsibleList);\r\n}\r\n"],"names":["items","lists"],"mappings":"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"}