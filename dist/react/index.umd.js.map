{"version":3,"file":"index.umd.js","sources":["../../src/components/atoms/icon-label/IconLabel.js","../../src/components/molecules/collapsible-item/CollapsibleItem.js","../../src/components/molecules/collapsible-list/CollapsibleList.js","../../src/components/organisms/selection-menu/SelectionMenu.js","../../src/components/organisms/image-collection/ImageCollection.js","../../src/init.js","../../src/wrappers/react/index.jsx"],"sourcesContent":["/**\n * IconLabel Component\n * A simple component that displays an icon next to a label\n */\n\nexport class IconLabel extends HTMLElement {\n  static get observedAttributes() {\n    return ['icon', 'label', 'reverse'];\n  }\n\n  constructor() {\n    super();\n    this._icon = '';\n    this._label = '';\n    this._reverse = false;\n  }\n\n  connectedCallback() {\n    this._render();\n  }\n\n  get icon() {\n    return this._icon;\n  }\n\n  set icon(value) {\n    this._icon = value || '';\n    this._render();\n  }\n\n  get label() {\n    return this._label;\n  }\n\n  set label(value) {\n    this._label = value || '';\n    this._render();\n  }\n\n  get reverse() {\n    return this._reverse;\n  }\n\n  set reverse(value) {\n    this._reverse = value !== null && value !== 'false';\n    this._render();\n  }\n\n  _render() {\n    // Create container\n    const container = document.createElement('span');\n    container.style.display = 'inline-flex';\n    container.style.alignItems = 'center';\n    container.style.gap = '0.5rem';\n    container.style.fontFamily = 'inherit';\n    container.style.color = 'currentColor';\n    \n    if (this._reverse) {\n      container.style.flexDirection = 'row-reverse';\n    }\n\n    // Create icon element if icon is provided\n    if (this._icon) {\n      const isImage = this._icon.startsWith('data:') || \n                     this._icon.startsWith('http') || \n                     this._icon.startsWith('/') ||\n                     /\\.(png|jpg|jpeg|svg|gif|webp)(\\?.*)?$/i.test(this._icon);\n      \n      const icon = isImage ? document.createElement('img') : document.createElement('span');\n      icon.style.display = 'inline-flex';\n      icon.style.alignItems = 'center';\n      icon.style.justifyContent = 'center';\n      icon.style.width = '1em';\n      icon.style.height = '1em';\n\n      if (isImage) {\n        icon.src = this._icon;\n        icon.alt = '';\n        icon.loading = 'lazy';\n        icon.style.objectFit = 'contain';\n      } else {\n        icon.textContent = this._icon;\n        icon.style.fontSize = '1em';\n        icon.style.lineHeight = '1';\n      }\n      \n      container.appendChild(icon);\n    }\n\n    // Add label if provided\n    if (this._label) {\n      const label = document.createElement('span');\n      label.textContent = this._label;\n      container.appendChild(label);\n    }\n\n    // Update the component\n    this.innerHTML = '';\n    this.appendChild(container);\n  }\n\n  attributeChangedCallback(name, oldValue, newValue) {\n    if (oldValue === newValue) return;\n    \n    if (name === 'icon') {\n      this._icon = newValue || '';\n    } else if (name === 'label') {\n      this._label = newValue || '';\n    } else if (name === 'reverse') {\n      this._reverse = newValue !== null && newValue !== 'false';\n    }\n    \n    this._render();\n  }\n}\n\n// Define the custom element\nif (!customElements.get('icon-label')) {\n  customElements.define('icon-label', IconLabel);\n}\n","/**\n * CollapsibleItem Component\n * A custom element that creates a collapsible list item\n * \n * @attr {boolean} expanded - Whether the item is expanded or collapsed\n * @attr {string} icon - Optional icon to display next to the label\n * @attr {string} label - The text label for the collapsible item\n * @attr {boolean} removeshift - If true, removes the left padding from the content area\n */\n\nimport { IconLabel } from '../../atoms/icon-label/IconLabel.js';\n\n// Import regular CSS\nimport './CollapsibleItem.css';\n\nexport class CollapsibleItem extends HTMLLIElement {\n    static get observedAttributes() {\n        return ['expanded', 'icon', 'label', 'removeshift', 'hide-icon'];\n    }\n    \n    constructor() {\n        super();\n        this._isExpanded = false;\n        this._handleClick = this._handleClick.bind(this);\n        this._header = null;\n        this._content = null;\n        this._initialRender = true;\n        this._removeShift = false;\n        this.rendered = false;\n        \n        // Add base class to the host element\n        this.classList.add('collapsible-item');\n        \n        // Initialize expanded state\n        if (this.hasAttribute('expanded')) {\n            this._isExpanded = true;\n            this.classList.add('collapsible-item--expanded');\n        }\n        \n        // Initialize no-padding state\n        if (this.hasAttribute('removeshift')) {\n            this.classList.add('collapsible-item--no-padding');\n        }\n    }\n\n    connectedCallback() {\n        // Ensure the component has the correct role for accessibility\n        if (!this.hasAttribute('role')) {\n            this.setAttribute('role', 'listitem');\n        }\n        \n        // Set up the component if not already rendered\n        if (!this.rendered) {\n            this._render();\n            this.rendered = true;\n            this._addEventListeners();\n            \n            // Ensure the content visibility is set correctly based on the expanded state\n            this._updateContentVisibility();\n        }\n        \n        // Ensure the component is properly styled\n        this.classList.add('collapsible-item');\n        \n        // Set initial expanded state\n        if (this.hasAttribute('expanded')) {\n            this._isExpanded = true;\n            this.classList.add('collapsible-item--expanded');\n        } else {\n            this._isExpanded = false;\n            this.classList.remove('collapsible-item--expanded');\n        }\n    }\n    \n    disconnectedCallback() {\n        this._removeEventListeners();\n    }\n    \n    _addEventListeners() {\n        // Add click listener to the component itself for event delegation\n        this.addEventListener('click', this._handleClick);\n    }\n    \n    _removeEventListeners() {\n        this.removeEventListener('click', this._handleClick);\n    }\n    \n    _handleClick(event) {\n        // Find the closest header from the click target\n        const header = event.target.closest('.collapsible-item__header');\n        if (!header) return; // Not a header click\n        \n        // Prevent the default action to avoid any native behavior\n        event.preventDefault();\n        event.stopPropagation();\n        \n        // Toggle the expanded state\n        const isExpanding = !this.hasAttribute('expanded');\n        \n        // Update the expanded attribute\n        if (isExpanding) {\n            this.setAttribute('expanded', '');\n        } else {\n            this.removeAttribute('expanded');\n        }\n        \n        // Update the internal state and UI\n        this._isExpanded = isExpanding;\n        this._updateContentVisibility();\n        \n        // Dispatch a custom event\n        this.dispatchEvent(new CustomEvent('toggle', {\n            detail: { expanded: isExpanding },\n            bubbles: true,\n            composed: true\n        }));\n    }\n    \n    _createHeader() {\n        const header = document.createElement('div');\n        header.className = 'collapsible-item__header';\n        \n        // Create a container for the icon and label\n        const contentWrapper = document.createElement('div');\n        contentWrapper.style.display = 'flex';\n        contentWrapper.style.alignItems = 'center';\n        contentWrapper.style.flex = '1';\n        \n        // Add icon if provided and not hidden\n        const hideIcon = this.hasAttribute('hide-icon');\n        const icon = this.getAttribute('icon');\n        if (icon && !hideIcon) {\n            const iconEl = document.createElement('span');\n            iconEl.className = 'collapsible-item__icon';\n            iconEl.textContent = icon;\n            iconEl.style.marginRight = '0.5rem';\n            contentWrapper.appendChild(iconEl);\n        }\n        \n        // Add label\n        const label = this.getAttribute('label') || '';\n        if (label) {\n            const labelEl = document.createElement('span');\n            labelEl.className = 'collapsible-item__label';\n            labelEl.textContent = label;\n            contentWrapper.appendChild(labelEl);\n        }\n        \n        // Add the content wrapper to the header\n        header.appendChild(contentWrapper);\n                \n        return header;\n    }\n    \n    _render() {\n        // Prevent re-entrancy during rendering\n        if (!this._isRendering) {\n            this._isRendering = true;\n            \n            // Store any existing content that should be preserved\n            const existingContent = [];\n            Array.from(this.children).forEach(child => {\n                if (child !== this._header && child !== this._content) {\n                    existingContent.push(child);\n                }\n            });\n            \n            // Clear existing content\n            while (this.firstChild) {\n                this.removeChild(this.firstChild);\n            }\n            \n            // Create and append header\n            this._header = this._createHeader();\n            this.appendChild(this._header);\n            \n            // Set header attributes for accessibility\n            if (this._header) {\n                this._header.setAttribute('role', 'button');\n                this._header.setAttribute('aria-expanded', this._isExpanded ? 'true' : 'false');\n                this._header.setAttribute('tabindex', '0');\n                \n                // Add keyboard support\n                this._header.addEventListener('keydown', (e) => {\n                    if (e.key === 'Enter' || e.key === ' ') {\n                        e.preventDefault();\n                        this._toggleExpanded();\n                    }\n                });\n            }\n            \n            // Create and append content container\n            this._content = this._createContent();\n            if (this._content) {\n                this.appendChild(this._content);\n                \n                // Add back any existing content to the content container\n                existingContent.forEach(child => {\n                    this._content.appendChild(child);\n                });\n            }\n            \n            // Ensure proper ARIA attributes for accessibility\n            this.setAttribute('role', 'listitem');\n            \n            // Set initial content visibility\n            this._updateContentVisibility();\n            \n            // Mark as rendered\n            this.rendered = true;\n            this._isRendering = false;\n        }\n    }\n    \n    _createContent() {\n        const content = document.createElement('div');\n        content.className = 'collapsible-item__content';\n        \n        // Filter out any header elements and their content\n        const headerElements = this.querySelectorAll('.collapsible-item__header, .collapsible-item__label, .collapsible-item__icon');\n        const headerElementSet = new Set(headerElements);\n        \n        // Process direct children that are not part of the header\n        const filteredChildren = Array.from(this.childNodes).filter(node => {\n            // Keep only element nodes that are not in the header\n            if (node.nodeType === Node.ELEMENT_NODE) {\n                return !headerElementSet.has(node) && !node.closest('.collapsible-item__header');\n            }\n            // Keep text nodes that are not just whitespace\n            if (node.nodeType === Node.TEXT_NODE) {\n                return node.textContent.trim() !== '' && \n                       !node.textContent.includes('▶') && \n                       !node.textContent.includes('▼');\n            }\n            return false;\n        });\n        \n        // Add the filtered children to the content\n        filteredChildren.forEach(child => {\n            content.appendChild(child.cloneNode(true));\n        });\n        \n        return content;\n    }\n    \n    get expanded() {\n        return this._isExpanded;\n    }\n    \n    set expanded(value) {\n        if (this._isExpanded === value) return; // No change needed\n        \n        this._isExpanded = value;\n        \n        // Update the attribute to reflect the state in the DOM\n        if (this._isExpanded) {\n            this.setAttribute('expanded', '');\n        } else {\n            this.removeAttribute('expanded');\n        }\n        \n        // Update the content visibility immediately\n        this._updateContentVisibility();\n        \n        // Dispatch the toggle event\n        this.dispatchEvent(new CustomEvent('toggle', {\n            detail: { expanded: this._isExpanded },\n            bubbles: true,\n            composed: true\n        }));\n    }\n    \n    _toggleExpanded() {\n        this._isExpanded = !this._isExpanded;\n        \n        // Update the expanded attribute\n        if (this._isExpanded) {\n            this.setAttribute('expanded', '');\n        } else {\n            this.removeAttribute('expanded');\n        }\n        \n        // Update the UI\n        this._updateContentVisibility();\n        \n        // Dispatch the toggle event\n        this.dispatchEvent(new CustomEvent('toggle', {\n            detail: { expanded: this._isExpanded },\n            bubbles: true,\n            composed: true\n        }));\n    }\n    \n    _updateContentVisibility() {\n        if (!this._content || !this._header) return;\n        \n        const hideIcon = this.hasAttribute('hide-icon');\n        \n        if (this._isExpanded) {\n            this._content.classList.add('collapsible-item__content--expanded');\n            this._content.style.display = 'block';\n            this._header.setAttribute('aria-expanded', 'true');\n            this.classList.add('collapsible-item--expanded');\n            // Update icon to expanded state (down arrow) only if not hidden\n            if (!hideIcon) {\n                this.setAttribute('icon', '▼');\n            }\n        } else {\n            this._content.classList.remove('collapsible-item__content--expanded');\n            this._content.style.display = 'none';\n            this._header.setAttribute('aria-expanded', 'false');\n            this.classList.remove('collapsible-item--expanded');\n            // Update icon to collapsed state (right arrow) only if not hidden\n            if (!hideIcon) {\n                this.setAttribute('icon', '▶');\n            }\n        }\n    }\n    \n    attributeChangedCallback(name, oldValue, newValue) {\n        if (name === 'removeshift') {\n            this._removeShift = newValue !== null;\n            if (this._removeShift) {\n                this.classList.add('collapsible-item--no-padding');\n            } else {\n                this.classList.remove('collapsible-item--no-padding');\n            }\n        } else if (name === 'hide-icon' && this._header) {\n            // Handle hide-icon attribute changes\n            const iconEl = this._header.querySelector('.collapsible-item__icon');\n            if (newValue !== null) {\n                // hide-icon is set, remove the icon if it exists\n                if (iconEl) {\n                    iconEl.remove();\n                }\n            } else if (this.hasAttribute('icon')) {\n                // hide-icon is removed, add the icon back if we have an icon attribute\n                if (!iconEl) {\n                    const icon = this.getAttribute('icon');\n                    const newIconEl = document.createElement('span');\n                    newIconEl.className = 'collapsible-item__icon';\n                    newIconEl.textContent = icon;\n                    newIconEl.style.marginRight = '0.5rem';\n                    const contentWrapper = this._header.firstElementChild;\n                    if (contentWrapper) {\n                        contentWrapper.insertBefore(newIconEl, contentWrapper.firstChild);\n                    }\n                }\n            }\n        } else if (name === 'expanded') {\n            const wasExpanded = this._isExpanded;\n            this._isExpanded = newValue !== null;\n            \n            // Only update if the state actually changed\n            if (this._isExpanded !== wasExpanded) {\n                this._updateContentVisibility();\n            }\n        } else if (name === 'icon' && this._header) {\n            // Update the icon if it exists, or create it if it doesn't\n            let iconEl = this._header.querySelector('.collapsible-item__icon');\n            if (newValue) {\n                if (!iconEl) {\n                    iconEl = document.createElement('span');\n                    iconEl.className = 'collapsible-item__icon';\n                    this._header.insertBefore(iconEl, this._header.firstChild);\n                }\n                iconEl.textContent = newValue;\n            } else if (iconEl) {\n                this._header.removeChild(iconEl);\n            }\n        } else if (name === 'label' && this._header) {\n            // Update the label if it exists, or create it if it doesn't\n            let labelEl = this._header.querySelector('.collapsible-item__label');\n            if (labelEl) {\n                labelEl.textContent = newValue || '';\n            } else if (newValue) {\n                labelEl = document.createElement('span');\n                labelEl.className = 'collapsible-item__label';\n                labelEl.textContent = newValue;\n                this._header.appendChild(labelEl);\n            }\n        }\n    }\n}\n\n// Define the custom element with the correct name\nconst elementName = 'collapsible-item';\n\n// Check if the element is already defined and undefine it if necessary\nif (typeof window !== 'undefined' && window.customElements) {\n    // First, try to undefine the element if it exists\n    if (window.customElements.get(elementName)) {\n        const oldElement = window.customElements.get(elementName);\n        delete window.customElements._elements[elementName];\n    }\n    \n    // Define the element with the proper configuration\n    window.customElements.define(elementName, CollapsibleItem, { extends: 'li' });\n}","/**\r\n * CollapsibleList Component\r\n * A custom element that creates a collapsible list container\r\n */\r\n\r\nexport class CollapsibleList extends HTMLElement {\r\n  static get observedAttributes() {\r\n    return ['reverse-heading', 'single-item', 'accordion'];\r\n  }\r\n  \r\n  constructor() {\r\n    super();\r\n    this.attachShadow({ mode: 'open' });\r\n    this._isUpdating = false; // Track if we're currently updating to prevent reentrant calls\r\n    this._handleItemToggle = this._handleItemToggle.bind(this);\r\n    \r\n    const container = document.createElement('div');\r\n    const slot = document.createElement('slot');\r\n    \r\n    // Create styles for the component\r\n    const style = document.createElement('style');\r\n    style.textContent = `\r\n      :host {\r\n        display: block;\r\n        width: 100%;\r\n        --indent-size: 1.5rem;\r\n      }\r\n      \r\n      ::slotted(collapsible-item) {\r\n        display: block;\r\n        margin: 0.25rem 0;\r\n        padding: 0;\r\n        width: 100%;\r\n      }\r\n      \r\n      /* Nested lists should have a border */\r\n      ::slotted(collapsible-list) {\r\n        border-left: 1px solid #e0e0e0;\r\n        margin-left: 0.5rem;\r\n        padding-left: 0.5rem;\r\n      }\r\n      \r\n      /* Style for the header in collapsible items */\r\n      .collapsible-item__header {\r\n        display: flex;\r\n        align-items: center;\r\n        width: 100%;\r\n        flex-direction: row;\r\n      }\r\n      \r\n      /* Toggle container styles */\r\n      .collapsible-item__toggle-container {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        width: var(--toggle-size, 24px);\r\n        height: var(--toggle-size, 24px);\r\n        margin: var(--toggle-margin, 0 8px 0 0);\r\n        flex-shrink: 0;\r\n      }`;\r\n    \r\n    container.appendChild(slot);\r\n    this.shadowRoot.append(style, container);\r\n  }\r\n  \r\n  async connectedCallback() {\r\n    if (!this._initialized) {\r\n      this._initializeComponent();\r\n      this._initialized = true;\r\n      \r\n      // Set initial reverse heading state\r\n      await this._updateReverseHeading();\r\n      \r\n      // Set up event listeners for accordion behavior\r\n      this.addEventListener('toggle', this._handleItemToggle);\r\n      \r\n      // Ensure at least one item is expanded in accordion mode\r\n      if (this.hasAttribute('accordion')) {\r\n        this._ensureOneItemExpanded();\r\n      }\r\n    }\r\n    \r\n    // Set up mutation observer for dynamic content\r\n    this._setupMutationObserver();\r\n  }\r\n  \r\n  _initializeComponent() {\r\n    if (!this.hasAttribute('role')) {\r\n      this.setAttribute('role', 'list');\r\n    }\r\n    \r\n    if (!this.hasAttribute('aria-label') && !this.hasAttribute('aria-labelledby')) {\r\n      console.warn('collapsible-list: Add an aria-label or aria-labelledby attribute for accessibility');\r\n    }\r\n  }\r\n  \r\n  _setupMutationObserver() {\r\n    // Set up a mutation observer to handle dynamically added items and attribute changes\r\n    this._observer = new MutationObserver(async (mutations) => {\r\n      let shouldUpdate = false;\r\n      \r\n      for (const mutation of mutations) {\r\n        if (mutation.type === 'attributes' && mutation.attributeName === 'reverse-heading') {\r\n          shouldUpdate = true;\r\n          break;\r\n        } else if (mutation.type === 'childList') {\r\n          // Check if any added nodes are collapsible items or lists\r\n          for (const node of mutation.addedNodes) {\r\n            if (node.nodeType === Node.ELEMENT_NODE && \r\n                (node.matches('collapsible-item') || node.matches('collapsible-list'))) {\r\n              shouldUpdate = true;\r\n              break;\r\n            }\r\n          }\r\n          if (shouldUpdate) break;\r\n        }\r\n      }\r\n      \r\n      if (shouldUpdate) {\r\n        await this._updateReverseHeading();\r\n      }\r\n    });\r\n    \r\n    // Start observing the component for attribute changes and child list changes\r\n    this._observer.observe(this, {\r\n      attributes: true,\r\n      attributeFilter: ['reverse-heading'],\r\n      childList: true,\r\n      subtree: true\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Updates the reverse heading state for all child collapsible items\r\n   * @private\r\n   */\r\n  async _updateReverseHeading() {\r\n    // Prevent reentrant calls\r\n    if (this._isUpdating) return;\r\n    this._isUpdating = true;\r\n    \r\n    try {\r\n      const isReversed = this.hasAttribute('reverse-heading') && \r\n                       this.getAttribute('reverse-heading') !== 'false';\r\n      \r\n      // Temporarily disconnect observer to prevent infinite loop\r\n      if (this._observer) {\r\n        this._observer.disconnect();\r\n      }\r\n      \r\n      // Process direct child collapsible-items\r\n      const processItems = async (items) => {\r\n        for (const item of items) {\r\n          // Set the attribute on the item\r\n          if (isReversed) {\r\n            item.setAttribute('reverse-heading', '');\r\n          } else {\r\n            item.removeAttribute('reverse-heading');\r\n          }\r\n          \r\n          // Process any nested items in this item (only direct children)\r\n          const nestedItems = item.querySelectorAll(':scope > collapsible-item');\r\n          if (nestedItems.length > 0) {\r\n            await processItems(Array.from(nestedItems));\r\n          }\r\n          \r\n          // Process any nested lists in this item (only direct children)\r\n          const nestedLists = item.querySelectorAll(':scope > collapsible-list');\r\n          if (nestedLists.length > 0) {\r\n            await processLists(Array.from(nestedLists));\r\n          }\r\n        }\r\n      };\r\n      \r\n      // Process nested collapsible-lists\r\n      const processLists = async (lists) => {\r\n        for (const list of lists) {\r\n          // Skip if this is the current list to prevent cycles\r\n          if (list === this) continue;\r\n          \r\n          // Set the attribute on the list\r\n          if (isReversed) {\r\n            list.setAttribute('reverse-heading', '');\r\n          } else {\r\n            list.removeAttribute('reverse-heading');\r\n          }\r\n          \r\n          // Process any direct child items in this list\r\n          const nestedItems = list.querySelectorAll(':scope > collapsible-item');\r\n          if (nestedItems.length > 0) {\r\n            await processItems(Array.from(nestedItems));\r\n          }\r\n          \r\n          // Process any direct child lists\r\n          const nestedLists = list.querySelectorAll(':scope > collapsible-list');\r\n          if (nestedLists.length > 0) {\r\n            await processLists(Array.from(nestedLists));\r\n          }\r\n        }\r\n      };\r\n      \r\n      // Start processing from the current element\r\n      const items = this.querySelectorAll(':scope > collapsible-item');\r\n      if (items.length > 0) {\r\n        await processItems(Array.from(items));\r\n      }\r\n      \r\n      const lists = this.querySelectorAll(':scope > collapsible-list');\r\n      if (lists.length > 0) {\r\n        await processLists(Array.from(lists));\r\n      }\r\n      \r\n      // Force a reflow to ensure all attribute changes are applied\r\n      if (this.shadowRoot) {\r\n        this.shadowRoot.offsetHeight; // This forces a reflow\r\n      }\r\n    } catch (error) {\r\n      console.error('Error updating reverse heading:', error);\r\n    } finally {\r\n      // Reconnect observer if it exists\r\n      if (this._observer) {\r\n        this._observer.observe(this, {\r\n          attributes: true,\r\n          attributeFilter: ['reverse-heading'],\r\n          childList: true,\r\n          subtree: true\r\n        });\r\n      }\r\n      this._isUpdating = false;\r\n    }\r\n  }\r\n\r\n  _handleItemToggle(e) {\r\n    if (this._isUpdating) return;\r\n    \r\n    const target = e.target;\r\n    \r\n    // Only process if this is a direct child\r\n    if (target.parentElement === this) {\r\n      this._isUpdating = true;\r\n      \r\n      if (this.hasAttribute('accordion')) {\r\n        // In accordion mode, close other items when one is opened\r\n        if (target.expanded) {\r\n          this._closeOtherItems(target);\r\n        }\r\n      } else if (this.hasAttribute('single-item')) {\r\n        // In single-item mode, just close other items when one is opened\r\n        if (target.expanded) {\r\n          this._closeOtherItems(target);\r\n        }\r\n      }\r\n      \r\n      this._isUpdating = false;\r\n    }\r\n  }\r\n  \r\n  _closeOtherItems(exceptItem) {\r\n    // Don't close items if inside an image-collection\r\n    if (this.closest('image-collection')) {\r\n      return;\r\n    }\r\n    \r\n    const items = this.querySelectorAll('collapsible-item');\r\n    items.forEach(item => {\r\n      if (item !== exceptItem) {\r\n        item.expanded = false;\r\n      }\r\n    });\r\n  }\r\n  \r\n  _getOpenItems() {\r\n    return Array.from(this.querySelectorAll('collapsible-item[expanded]'));\r\n  }\r\n  \r\n  _ensureOneItemExpanded() {\r\n    if (!this.hasAttribute('accordion')) return;\r\n    \r\n    const openItems = this._getOpenItems();\r\n    if (openItems.length === 0) {\r\n      // If no items are open, open the first one\r\n      const firstItem = this.querySelector('collapsible-item');\r\n      if (firstItem) {\r\n        firstItem.setAttribute('expanded', '');\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Define the custom element\r\nif (!customElements.get('collapsible-list')) {\r\n  customElements.define('collapsible-list', CollapsibleList);\r\n}\r\n","/**\n * SelectionMenu Component\n * A collapsible menu that allows selection of leaf nodes using CollapsibleItem\n * \n * @fires item-selected - Dispatched when a leaf node is selected\n * @property {string} items - JSON string representing the menu items structure\n * @property {string} selected - ID of the currently selected item\n */\n\nexport class SelectionMenu extends HTMLElement {\n  static get observedAttributes() {\n    return ['items', 'selected'];\n  }\n\n  constructor() {\n    super();\n    this.attachShadow({ mode: 'open' });\n    this._items = [];\n    this._selectedId = null;\n    this._boundOnItemClick = this._onItemClick.bind(this);\n    \n    // Import the CollapsibleItem component\n    import('../../molecules/collapsible-item/CollapsibleItem.js');\n  }\n\n  connectedCallback() {\n    this._render();\n  }\n\n  disconnectedCallback() {\n    this._removeEventListeners();\n  }\n\n  attributeChangedCallback(name, oldValue, newValue) {\n    if (oldValue === newValue) return;\n\n    switch (name) {\n      case 'items':\n        this._items = newValue ? JSON.parse(newValue) : [];\n        this._render();\n        break;\n      case 'selected':\n        this._selectedId = newValue;\n        this._updateSelectedState();\n        break;\n    }\n  }\n\n  get items() {\n    return JSON.stringify(this._items);\n  }\n\n  set items(value) {\n    this._items = value ? JSON.parse(value) : [];\n    this._render();\n  }\n\n  get selected() {\n    return this._selectedId;\n  }\n\n  set selected(value) {\n    if (this._selectedId !== value) {\n      this._selectedId = value;\n      this._updateSelectedState();\n    }\n  }\n\n  _render() {\n    if (!this.shadowRoot) return;\n    \n    this.shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: block;\n          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n          --primary-color: #4a6cf7;\n          --hover-bg: #f5f8ff;\n          --selected-bg: #e6f0ff;\n          --border-color: #e2e8f0;\n          --text-color: #2d3748;\n          --text-secondary: #4a5568;\n        }\n        \n        .menu-container {\n          border: 1px solid var(--border-color);\n          border-radius: 6px;\n          overflow: hidden;\n        }\n        \n        .menu-item {\n          cursor: pointer;\n          transition: background-color 0.2s ease;\n          margin: 2px 0;\n          border-radius: 4px;\n        }\n        \n        .menu-item:hover {\n          background-color: var(--hover-bg, #f5f8ff);\n        }\n        \n        .menu-item--selected {\n          background-color: var(--selected-bg, #e6f0ff);\n          color: var(--primary-color, #4a6cf7);\n          font-weight: 500;\n        }\n        \n        .menu-item--selected:hover {\n          background-color: var(--selected-bg, #e6f0ff);\n        }\n        \n        /* Style for the collapsible item header */\n        .menu-item::part(header) {\n          padding: 8px 12px;\n          display: flex;\n          align-items: center;\n        }\n        \n        /* Style for the collapsible item content */\n        .menu-item::part(content) {\n          padding: 0;\n          overflow: hidden;\n          transition: max-height 0.3s ease, opacity 0.2s ease;\n          max-height: 0;\n          opacity: 0;\n          margin: 0;\n        }\n        \n        .menu-item::part(content).menu-item__content--expanded {\n          max-height: 1000px; /* Adjust based on your needs */\n          opacity: 1;\n          padding: 4px 0 4px 1rem;\n        }\n        \n        .menu-item__child-list {\n          list-style: none;\n          padding: 0;\n          margin: 0 0 0 1rem;\n        }\n        \n        /* Remove bullets from ul elements */\n        ul {\n          list-style-type: none;\n          padding: 0;\n          margin: 0;\n        }\n        \n        /* Ensure list items have no default styling */\n        li {\n          list-style: none;\n          padding: 0;\n          margin: 0;\n        }\n        \n        /* Leaf item styles */\n        .menu-item__leaf {\n          display: flex;\n          align-items: center;\n          padding: 4px 12px;\n          cursor: pointer;\n          transition: background-color 0.2s ease;\n          border-radius: 4px;\n        }\n        \n        .menu-item__leaf:hover {\n          background-color: var(--hover-bg, #f5f8ff);\n        }\n        \n        .menu-item__leaf.menu-item--selected {\n          background-color: var(--selected-bg, #e6f0ff);\n          color: var(--primary-color, #4a6cf7);\n          font-weight: 500;\n        }\n        \n        /* Arrow icon for collapsible items */\n        .menu-item__arrow {\n          display: inline-block;\n          width: 12px;\n          text-align: center;\n          transition: transform 0.2s ease;\n        }\n        \n        .menu-item[expanded] .menu-item__arrow {\n          transform: rotate(90deg);\n        }\n      </style>\n      <div class=\"menu-container\">\n        ${this._renderItems(this._items, 0)}\n      </div>\n    `;\n    \n    this._addEventListeners();\n  }\n  \n  _renderItems(items, level = 0) {\n    if (!items || !items.length) return '';\n    \n    // Create a container for the list\n    const listContainer = document.createElement('ul');\n    listContainer.style.listStyle = 'none';\n    listContainer.style.padding = '0';\n    listContainer.style.margin = '0';\n    \n    items.forEach(item => {\n      const hasChildren = item.children && item.children.length > 0;\n      const isSelected = this._selectedId === item.id;\n      \n      // Create list item\n      const li = document.createElement('li');\n      li.setAttribute('data-id', item.id);\n      \n      if (hasChildren) {\n        // For items with children, use collapsible-item\n        li.setAttribute('is', 'collapsible-item');\n        li.setAttribute('data-id', item.id);\n        li.setAttribute('label', item.name);\n        \n        // Determine initial state\n        const hasSelectedDescendant = this._hasSelectedDescendant(item);\n        const isExpanded = hasSelectedDescendant || isSelected;\n        \n        // Set initial expanded state\n        if (isExpanded) {\n          li.setAttribute('expanded', '');\n        }\n        \n        // Set the arrow icon using the icon attribute\n        li.setAttribute('icon', isExpanded ? '▼' : '▶');\n        li.style.marginRight = '8px';\n        li.style.transition = 'transform 0.2s ease';\n        \n        if (isSelected) {\n          li.classList.add('menu-item--selected');\n        }\n        \n        // Create and append child list\n        const childList = document.createElement('ul');\n        childList.className = 'menu-item__child-list';\n        childList.innerHTML = this._renderItems(item.children, level + 1);\n        \n        // Create content container with proper styling\n        const contentSlot = document.createElement('div');\n        contentSlot.slot = 'content';\n        contentSlot.className = 'menu-item__content';\n        \n        // Add the child list to the content slot\n        contentSlot.appendChild(childList);\n        \n        // Add the content slot to the collapsible item\n        li.appendChild(contentSlot);\n        \n        // Handle the toggle event to update the content visibility\n        li.addEventListener('toggle', (e) => {\n          contentSlot.style.display = e.detail.expanded ? 'block' : 'none';\n        });\n      } else {\n        // For leaf nodes, just use a span\n        const span = document.createElement('span');\n        span.className = 'menu-item__leaf';\n        if (isSelected) span.classList.add('menu-item--selected');\n        \n      \n        \n        // Add label\n        const label = document.createElement('span');\n        label.className = 'menu-item__label';\n        label.textContent = item.name;\n        span.appendChild(label);\n        \n        // Add click handler for selection\n        span.addEventListener('click', (e) => {\n          e.stopPropagation();\n          this._selectedId = item.id;\n          this._updateSelectedState();\n          this.dispatchEvent(new CustomEvent('item-selected', {\n            detail: {\n              id: item.id,\n              item: item,\n              name: item.name\n            },\n            bubbles: true,\n            composed: true\n          }));\n        });\n        \n        li.appendChild(span);\n      }\n      \n      listContainer.appendChild(li);\n    });\n    \n    return level === 0 ? listContainer.outerHTML : listContainer.innerHTML;\n  }\n  \n  _addEventListeners() {\n    this.shadowRoot.addEventListener('click', this._boundOnItemClick);\n  }\n  \n  _removeEventListeners() {\n    this.shadowRoot.removeEventListener('click', this._boundOnItemClick);\n  }\n  \n  _onItemClick(event) {\n    // Handle leaf node clicks\n    const leafNode = event.target.closest('.menu-item__leaf');\n    if (leafNode) {\n      event.stopPropagation();\n      const itemId = leafNode.getAttribute('data-id');\n      if (itemId) {\n        this.selected = itemId;\n        this._updateSelectedState();\n        this.dispatchEvent(new CustomEvent('item-selected', {\n          detail: { id: itemId },\n          bubbles: true,\n          composed: true\n        }));\n      }\n      return;\n    }\n    \n    // Handle collapsible item clicks\n    const header = event.target.closest('.collapsible-item__header');\n    if (!header) return;\n    \n    const itemElement = header.parentElement;\n    if (itemElement && itemElement.getAttribute('is') === 'collapsible-item') {\n      event.stopPropagation();\n      \n      // Toggle the expanded state\n      const isExpanded = itemElement.hasAttribute('expanded');\n      const arrowIcon = itemElement.querySelector('.menu-item__arrow');\n      \n      if (isExpanded) {\n        itemElement.removeAttribute('expanded');\n        if (arrowIcon) arrowIcon.textContent = '▶';\n      } else {\n        itemElement.setAttribute('expanded', '');\n        if (arrowIcon) arrowIcon.textContent = '▼';\n      }\n      \n      // Dispatch a custom event for the toggle action\n      itemElement.dispatchEvent(new CustomEvent('toggle', {\n        detail: { expanded: !isExpanded },\n        bubbles: true,\n        composed: true\n      }));\n    }\n  }\n  \n  _updateSelectedState() {\n    if (!this.shadowRoot) return;\n    \n    // Remove selected class from all items\n    const allCollapsibleItems = this.shadowRoot.querySelectorAll('li[is=\"collapsible-item\"]');\n    const allLeafItems = this.shadowRoot.querySelectorAll('.menu-item__leaf');\n    \n    allCollapsibleItems.forEach(item => {\n      item.classList.remove('menu-item--selected');\n      item.removeAttribute('selected');\n    });\n    \n    allLeafItems.forEach(leaf => {\n      leaf.classList.remove('menu-item--selected');\n    });\n    \n    // Add selected class to the selected item\n    if (this._selectedId) {\n      \n      // Check collapsible items\n      const selectedCollapsibleItem = this.shadowRoot.querySelector(`li[is=\"collapsible-item\"][data-id=\"${this._selectedId}\"]`);\n      if (selectedCollapsibleItem) {\n        selectedCollapsibleItem.classList.add('menu-item--selected');\n        selectedCollapsibleItem.setAttribute('selected', '');\n      }\n      \n      // Check leaf items\n      const selectedLeafItem = this.shadowRoot.querySelector(`li[data-id=\"${this._selectedId}\"] .menu-item__leaf`);\n      if (selectedLeafItem) {\n        selectedLeafItem.classList.add('menu-item--selected');\n      }\n      \n      // If we didn't find the item, it might be because it's in a closed collapsible item\n      if (!selectedCollapsibleItem && !selectedLeafItem) {\n        console.warn('Could not find selected item in the DOM. It might be in a closed collapsible section.');\n      }\n    }\n  }\n  \n  _hasSelectedDescendant(item) {\n    if (!item) return false;\n    \n    // Check if this item is selected\n    if (item.id === this._selectedId) return true;\n    \n    // Check if any child is selected\n    if (item.children) {\n      return item.children.some(child => this._hasSelectedDescendant(child));\n    }\n    \n    return false;\n  }\n  \n  _findItemById(items, id) {\n    if (!items || !items.length) return null;\n    \n    for (const item of items) {\n      if (item.id === id) return item;\n      if (item.children) {\n        const found = this._findItemById(item.children, id);\n        if (found) return found;\n      }\n    }\n    return null;\n  }\n}\n\n// Define the custom element\nif (!customElements.get('selection-menu')) {\n  customElements.define('selection-menu', SelectionMenu);\n}","import { CollapsibleItem } from '../../molecules/collapsible-item/CollapsibleItem.js';\n\nexport class ImageCollection extends HTMLElement {\n    static get observedAttributes() {\n        return ['images'];\n    }\n\n    constructor() {\n        super();\n        this.attachShadow({ mode: 'open' });\n        this._images = [];\n        this._handleToggle = this._handleToggle.bind(this);\n        this._currentOpenIndex = 0;\n    }\n\n    get images() {\n        return this._images;\n    }\n\n    set images(value) {\n        if (Array.isArray(value)) {\n            this._images = value;\n            this.render();\n        } else if (typeof value === 'string') {\n            try {\n                this._images = JSON.parse(value);\n                this.render();\n            } catch (e) {\n            }\n        }\n    }\n\n    connectedCallback() {\n        this.render();\n        this.shadowRoot.addEventListener('toggle', this._handleToggle);\n    }\n\n    disconnectedCallback() {\n        this.shadowRoot.removeEventListener('toggle', this._handleToggle);\n    }\n\n    _handleToggle(event) {\n        // Prevent event from bubbling up\n        event.stopPropagation();\n        \n        // Prevent reentrant calls\n        if (this._isHandlingToggle) return;\n        this._isHandlingToggle = true;\n        \n        let index = -1;\n        let wasExpanded = false;\n        \n        try {\n            \n            // Find the clicked collapsible item by traversing up the composed path\n            const target = event.composedPath().find(\n                node => node.nodeType === Node.ELEMENT_NODE && \n                       node.getAttribute && \n                       node.getAttribute('is') === 'collapsible-item'\n            );\n            \n            if (!target) {\n                return;\n            }\n\n            // Get all collapsible items\n            const allItems = Array.from(this.shadowRoot.querySelectorAll('li[is=\"collapsible-item\"]'));\n            index = allItems.indexOf(target);\n            \n            if (index === -1) {\n                return;\n            }\n            \n            // Prevent toggling if this item is already open\n            if (index === this._currentOpenIndex) {\n                return;\n            }\n            \n            wasExpanded = target.expanded;\n            \n            // Update all items\n            \n            // First, close all items except the target\n            allItems.forEach((item, i) => {\n                if (i !== index && item.expanded) {\n                    item.expanded = false;\n                }\n            });\n            \n            // Then toggle the target item if needed\n            if (index === this._currentOpenIndex) {\n                // Clicked the currently open item - close it\n                target.expanded = false;\n                this._currentOpenIndex = -1;\n            } else {\n                // Open the clicked item\n                target.expanded = true;\n                this._currentOpenIndex = index;\n            }\n        } finally {\n            // Always clear the flag, even if an error occurred\n            this._isHandlingToggle = false;\n        }\n        \n        // Dispatch our custom event\n        this.dispatchEvent(new CustomEvent('toggle', {\n            detail: { \n                index,\n                expanded: !wasExpanded,\n                source: 'image-collection'\n            },\n            bubbles: true,\n            composed: true\n        }));\n    }\n\n    \n    _onItemToggle(event) {\n        // Stop propagation to prevent double-handling\n        event.stopPropagation();\n        \n        const targetItem = event.target.closest('li[is=\"collapsible-item\"]');\n        if (!targetItem) return;\n\n        const items = Array.from(this.shadowRoot.querySelectorAll('li[is=\"collapsible-item\"]'));\n        const index = items.indexOf(targetItem);\n        \n        if (index === -1) return;\n\n        // If the clicked item is being closed, just update our state\n        if (!event.detail.expanded) {\n            if (this._currentOpenIndex === index) {\n                this._currentOpenIndex = -1;\n            }\n            return;\n        }\n\n        // Close the previously open item if it's different from the clicked one\n        if (this._currentOpenIndex !== -1 && this._currentOpenIndex !== index) {\n            const previousItem = items[this._currentOpenIndex];\n            if (previousItem) {\n                previousItem.toggle(false);\n            }\n        }\n        \n        this._currentOpenIndex = index;\n    }\n\n    render() {\n        if (!this.shadowRoot) return;\n        \n        // Only expand the first item if no item is currently expanded\n        if (this._currentOpenIndex === -1 && this._images.length > 0) {\n            this._currentOpenIndex = 0;\n        }\n        \n        this.shadowRoot.innerHTML = `\n            <style>\n                .image-collection {\n                    width: 100%;\n                    max-width: 800px;\n                    margin: 0 auto;\n                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n                }\n                \n                .image-collection__container {\n                    display: flex;\n                    flex-direction: column;\n                    gap: 0;\n                    width: 100%;\n                    list-style: none;\n                    padding: 0;\n                }\n                \n                .image-collection__item {\n                    width: 100%;\n                    border: 1px solid #e2e8f0;\n                    border-radius: 4px;\n                    overflow: hidden;\n                }\n                \n                .image-collection__image {\n                    width: 100%;\n                    height: auto;\n                    display: block;\n                }\n                \n                .image-collection__title {\n                    font-weight: 600;\n                    padding: 0.8rem 1rem;\n                    background-color: #f8fafc;\n                    width: 100%;\n                    cursor: pointer;\n                    transition: background-color 0.2s;\n                }\n                \n                .image-collection__title:hover {\n                    background-color: #f1f5f9;\n                }\n                \n                .image-collection .collapsible-item__header {\n                    padding: 0.5rem 1rem;\n                    background: none;\n                    border: none;\n                    width: 100%;\n                    text-align: left;\n                    cursor: pointer;\n                }\n                \n                .image-collection .collapsible-item__content {\n                    margin: 0;\n                    transition: all 0.3s ease;\n                }\n                \n                .image-collection li[is=\"collapsible-item\"] {\n                    border: 1px solid #e2e8f0;\n                    border-radius: 4px;\n                    overflow: hidden;\n                }\n                \n                .image-collection li[is=\"collapsible-item\"]:last-child {\n                    margin-bottom: 0;\n                }\n            </style>\n            <div class=\"image-collection\">\n                <ul class=\"image-collection__container\">\n                    ${this._images.map((image, index) => `\n                        <li is=\"collapsible-item\" \n                            label=\"${image.title}\" \n                            ${image.removeshift ? 'removeshift=\"true\"' : ''}\n                            ${this._currentOpenIndex === index ? 'expanded' : ''}\n                            hide-icon\n                            >\n                            <div slot=\"content\">\n                                <img \n                                    class=\"image-collection__image\" \n                                    src=\"${image.src}\" \n                                    alt=\"${image.title}\"\n                                    loading=\"lazy\"\n                                >\n                            </div>\n                        </li>\n                    `).join('')}\n                </ul>\n            </div>\n        `;\n    }\n}\n\nif (!customElements.get('image-collection')) {\n    customElements.define('image-collection', ImageCollection);\n}","// Import components\nimport { CollapsibleItem } from './components/molecules/collapsible-item/CollapsibleItem.js';\nimport { CollapsibleList } from './components/molecules/collapsible-list/CollapsibleList.js';\nimport { IconLabel } from './components/atoms/icon-label/IconLabel.js';\nimport { SelectionMenu } from './components/organisms/selection-menu/SelectionMenu.js';\nimport { ImageCollection } from './components/organisms/image-collection/ImageCollection.js';\n\n// Track if elements have been defined\nlet elementsDefined = false;\n\n// Initialize web components\nexport function defineCustomElements() {\n  // Return early if elements are already defined\n  if (elementsDefined || window.__GENERIC_WEBCOMPONENTS_DEFINED__) {\n    return Promise.resolve();\n  }\n\n  // Mark as defined\n  elementsDefined = true;\n  window.__GENERIC_WEBCOMPONENTS_DEFINED__ = true;\n\n  // Define all custom elements with their actual implementations\n  if (!customElements.get('collapsible-list')) {\n    customElements.define('collapsible-list', CollapsibleList);\n  }\n  if (!customElements.get('collapsible-item')) {\n    customElements.define('collapsible-item', CollapsibleItem, { extends: 'li' });\n  }\n  if (!customElements.get('icon-label')) {\n    customElements.define('icon-label', IconLabel);\n  }\n  if (!customElements.get('selection-menu')) {\n    customElements.define('selection-menu', SelectionMenu);\n  }\n  if (!customElements.get('image-collection')) {\n    customElements.define('image-collection', ImageCollection);\n  }\n  if (!customElements.get('product-layout')) {\n    customElements.define('product-layout', class extends HTMLElement {\n      constructor() {\n        super();\n        // Implementation will be added based on actual component logic\n      }\n    });\n  }\n\n  // Wait for all elements to be defined\n  return Promise.all([\n    customElements.whenDefined('collapsible-list'),\n    customElements.whenDefined('collapsible-item'),\n    customElements.whenDefined('icon-label'),\n    customElements.whenDefined('selection-menu'),\n    customElements.whenDefined('image-collection'),\n    customElements.whenDefined('product-layout')\n  ]);\n}\n\n// Auto-define components if in a browser environment\nif (typeof window !== 'undefined' && !window.__GENERIC_WEBCOMPONENTS_DEFINED__) {\n  window.__GENERIC_WEBCOMPONENTS_DEFINED__ = true;\n  defineCustomElements().catch(console.error);\n}\n","/// src/wrappers/react/index.jsx\nimport React, { forwardRef, useImperativeHandle, useRef } from 'react';\nimport { defineCustomElements } from '../../init.js';\n\n// Initialize web components when the module is loaded\ndefineCustomElements().catch(console.error);\n\n// Handle icon path resolution for React\nconst resolveIconPath = (icon) => {\n  if (!icon) return '';\n  // If it's a full URL or data URI, use as is\n  if (icon.startsWith('http') || icon.startsWith('data:') || icon.startsWith('blob:')) {\n    return icon;\n  }\n  // For local paths, assume they're relative to the public folder in the consuming app\n  return icon;\n};\n\n// Create React wrappers for each web component\nconst createReactWrapper = (tagName) => {\n  const Component = forwardRef(({ \n    children, \n    style, \n    className, \n    onToggle, // Special handler for collapsible-item\n    ...props \n  }, ref) => {\n    const elementRef = useRef(null);\n    \n    // Handle ref forwarding\n    useImperativeHandle(ref, () => ({\n      ...(elementRef.current || {}),\n      // Add any component-specific methods here\n    }));\n\n    // Handle custom element ref\n    const handleRef = (el) => {\n      elementRef.current = el;\n      \n      // Forward the ref\n      if (ref) {\n        if (typeof ref === 'function') {\n          ref(el);\n        } else if (ref) {\n          ref.current = el;\n        }\n      }\n      \n      // Add event listeners for collapsible-item\n      if (tagName === 'collapsible-item' && el) {\n        el.addEventListener('toggle', (e) => {\n          if (onToggle) onToggle(e);\n        });\n      }\n    };\n    \n    // Special handling for specific components\n    if (tagName === 'icon-label') {\n      return React.createElement(tagName, {\n        ref: handleRef,\n        ...props,\n        class: className,\n        style: {\n          '--icon-size': '24px', // Default size, can be overridden by style prop\n          ...(style || {})\n        },\n        'icon': props.icon ? resolveIconPath(props.icon) : undefined,\n        'label': props.label || ''\n      }, children);\n    }\n    \n    // Special handling for collapsible-item\n    if (tagName === 'collapsible-item') {\n      const { expanded, icon, label, removeshift, hideIcon, ...restProps } = props;\n      \n      // Create the header content\n      const headerContent = React.createElement('div', {\n        className: 'collapsible-item__header',\n        slot: 'header',\n        onClick: (e) => {\n          // Prevent event from bubbling up to the parent\n          e.stopPropagation();\n          if (onToggle) onToggle({ detail: { expanded: !expanded } });\n        }\n      }, [\n        icon && !hideIcon && React.createElement('icon-label', {\n          key: 'icon',\n          icon: resolveIconPath(icon),\n          className: 'collapsible-item__icon',\n          slot: 'icon'\n        }),\n        label && React.createElement('span', { \n          key: 'label',\n          className: 'collapsible-item__label',\n          slot: 'label' \n        }, label)\n      ].filter(Boolean));\n      \n      // Create the content wrapper\n      const content = React.createElement('div', {\n        className: 'collapsible-item__content',\n        slot: 'content'\n      }, children);\n      \n      return React.createElement(tagName, {\n        ref: handleRef,\n        ...restProps,\n        class: className,\n        style: style,\n        'expanded': expanded,\n        'icon': icon,\n        'label': label,\n        'removeshift': removeshift,\n        'hide-icon': hideIcon\n      }, [headerContent, content]);\n    }\n    \n    // For other components\n    const elementProps = Object.entries(props).reduce((acc, [key, value]) => {\n      // Handle events (onEvent -> onevent)\n      if (key.startsWith('on') && key[2] === key[2].toUpperCase()) {\n        const eventName = key[2].toLowerCase() + key.slice(3);\n        return { ...acc, [eventName]: value };\n      }\n      // Handle className -> class\n      if (key === 'className') {\n        return { ...acc, class: value };\n      }\n      // Handle style object\n      if (key === 'style' && typeof value === 'object') {\n        return { ...acc, style: value };\n      }\n      // Special handling for icon prop\n      if (key === 'icon') {\n        return { ...acc, icon: resolveIconPath(value) };\n      }\n      // Pass through other props\n      return { ...acc, [key]: value };\n    }, {});\n    \n    // Handle ref and props\n    const elementPropsWithRef = {\n      ...elementProps,\n      ref: (element) => {\n        if (element) {\n          elementRef.current = element;\n          \n          // Forward the ref if it's a function\n          if (typeof ref === 'function') {\n            ref(element);\n          } else if (ref) {\n            ref.current = element;\n          }\n        }\n      }\n    };\n    \n    return React.createElement(tagName, elementPropsWithRef, children);\n  });\n  \n  // Set display name for better debugging\n  Component.displayName = tagName;\n  \n  return Component;\n};\n\n// Export all components as named exports\nconst CollapsibleList = createReactWrapper('collapsible-list');\nconst CollapsibleItem = createReactWrapper('collapsible-item');\nconst IconLabel = createReactWrapper('icon-label');\nconst SelectionMenu = createReactWrapper('selection-menu');\nconst ImageCollection = createReactWrapper('image-collection');\nconst ProductLayout = createReactWrapper('product-layout');\n\n// Export all components as named exports\nexport {\n  CollapsibleList,\n  CollapsibleItem,\n  IconLabel,\n  SelectionMenu,\n  ImageCollection,\n  ProductLayout,\n  defineCustomElements\n};\n\n// Default export with all components\nexport default {\n  CollapsibleList,\n  CollapsibleItem,\n  IconLabel,\n  SelectionMenu,\n  ImageCollection,\n  ProductLayout,\n  defineCustomElements\n};"],"names":["HTMLElement","observedAttributes","constructor","super","this","_icon","_label","_reverse","connectedCallback","_render","icon","value","label","reverse","container","document","createElement","style","display","alignItems","gap","fontFamily","color","flexDirection","isImage","startsWith","test","justifyContent","width","height","src","alt","loading","objectFit","textContent","fontSize","lineHeight","appendChild","innerHTML","attributeChangedCallback","name","oldValue","newValue","customElements","get","define","IconLabel","HTMLLIElement","_isExpanded","_handleClick","bind","_header","_content","_initialRender","_removeShift","rendered","classList","add","hasAttribute","setAttribute","_addEventListeners","_updateContentVisibility","remove","disconnectedCallback","_removeEventListeners","addEventListener","removeEventListener","event","target","closest","preventDefault","stopPropagation","isExpanding","removeAttribute","dispatchEvent","CustomEvent","detail","expanded","bubbles","composed","_createHeader","header","className","contentWrapper","flex","hideIcon","getAttribute","iconEl","marginRight","labelEl","_isRendering","existingContent","Array","from","children","forEach","child","push","firstChild","removeChild","e","key","_toggleExpanded","_createContent","content","headerElements","querySelectorAll","headerElementSet","Set","childNodes","filter","node","nodeType","Node","ELEMENT_NODE","has","TEXT_NODE","trim","includes","cloneNode","querySelector","newIconEl","firstElementChild","insertBefore","wasExpanded","elementName","window","_elements","CollapsibleItem","extends","attachShadow","mode","_isUpdating","_handleItemToggle","slot","shadowRoot","append","_initialized","_initializeComponent","_updateReverseHeading","_ensureOneItemExpanded","_setupMutationObserver","_observer","MutationObserver","async","mutations","shouldUpdate","mutation","type","attributeName","addedNodes","matches","observe","attributes","attributeFilter","childList","subtree","isReversed","disconnect","processItems","items","item","nestedItems","length","nestedLists","processLists","lists","list","offsetHeight","error","parentElement","_closeOtherItems","exceptItem","_getOpenItems","openItems","firstItem","CollapsibleList","_items","_selectedId","_boundOnItemClick","_onItemClick","Promise","resolve","then","CollapsibleItem$2","JSON","parse","_updateSelectedState","stringify","selected","_renderItems","level","listContainer","listStyle","padding","margin","hasChildren","isSelected","id","li","hasSelectedDescendant","isExpanded","_hasSelectedDescendant","transition","contentSlot","span","outerHTML","leafNode","itemId","itemElement","arrowIcon","allCollapsibleItems","allLeafItems","leaf","selectedCollapsibleItem","selectedLeafItem","some","_findItemById","found","SelectionMenu","_images","_handleToggle","_currentOpenIndex","images","isArray","render","_isHandlingToggle","index","composedPath","find","allItems","indexOf","i","source","_onItemToggle","targetItem","previousItem","toggle","map","image","title","removeshift","join","ImageCollection","elementsDefined","defineCustomElements","__GENERIC_WEBCOMPONENTS_DEFINED__","all","whenDefined","catch","console","resolveIconPath","createReactWrapper","tagName","Component","forwardRef","onToggle","props","ref","elementRef","useRef","useImperativeHandle","current","handleRef","el","React","class","undefined","restProps","headerContent","onClick","Boolean","elementProps","elementPropsWithRef","Object","entries","reduce","acc","toUpperCase","eventName","toLowerCase","slice","element","displayName","ProductLayout"],"mappings":"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"}