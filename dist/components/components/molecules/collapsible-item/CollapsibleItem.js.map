{"version":3,"file":"CollapsibleItem.js","sources":["../../../../../src/components/molecules/collapsible-item/CollapsibleItem.js"],"sourcesContent":["/**\n * CollapsibleItem Component\n * A custom element that creates a collapsible list item\n * \n * @attr {boolean} expanded - Whether the item is expanded or collapsed\n * @attr {string} icon - Optional icon to display next to the label\n * @attr {string} label - The text label for the collapsible item\n * @attr {boolean} removeshift - If true, removes the left padding from the content area\n */\n\nimport { IconLabel } from '../../atoms/icon-label/IconLabel.js';\n\n// Import regular CSS\nimport './CollapsibleItem.css';\n\nexport class CollapsibleItem extends HTMLLIElement {\n    static get observedAttributes() {\n        return ['expanded', 'icon', 'label', 'removeshift', 'hide-icon'];\n    }\n    \n    constructor() {\n        super();\n        this._isExpanded = false;\n        this._handleClick = this._handleClick.bind(this);\n        this._header = null;\n        this._content = null;\n        this._initialRender = true;\n        this._removeShift = false;\n        this.rendered = false;\n        \n        // Add base class to the host element\n        this.classList.add('collapsible-item');\n        \n        // Initialize expanded state\n        if (this.hasAttribute('expanded')) {\n            this._isExpanded = true;\n            this.classList.add('collapsible-item--expanded');\n        }\n        \n        // Initialize no-padding state\n        if (this.hasAttribute('removeshift')) {\n            this.classList.add('collapsible-item--no-padding');\n        }\n    }\n\n    connectedCallback() {\n        // Ensure the component has the correct role for accessibility\n        if (!this.hasAttribute('role')) {\n            this.setAttribute('role', 'listitem');\n        }\n        \n        // Set up the component if not already rendered\n        if (!this.rendered) {\n            this._render();\n            this.rendered = true;\n            this._addEventListeners();\n            \n            // Ensure the content visibility is set correctly based on the expanded state\n            this._updateContentVisibility();\n        }\n        \n        // Ensure the component is properly styled\n        this.classList.add('collapsible-item');\n        \n        // Set initial expanded state\n        if (this.hasAttribute('expanded')) {\n            this._isExpanded = true;\n            this.classList.add('collapsible-item--expanded');\n        } else {\n            this._isExpanded = false;\n            this.classList.remove('collapsible-item--expanded');\n        }\n    }\n    \n    disconnectedCallback() {\n        this._removeEventListeners();\n    }\n    \n    _addEventListeners() {\n        // Add click listener to the component itself for event delegation\n        this.addEventListener('click', this._handleClick);\n    }\n    \n    _removeEventListeners() {\n        this.removeEventListener('click', this._handleClick);\n    }\n    \n    _handleClick(event) {\n        // Find the closest header from the click target\n        const header = event.target.closest('.collapsible-item__header');\n        if (!header) return; // Not a header click\n        \n        // Prevent the default action to avoid any native behavior\n        event.preventDefault();\n        event.stopPropagation();\n        \n        // Toggle the expanded state\n        const isExpanding = !this.hasAttribute('expanded');\n        \n        // Update the expanded attribute\n        if (isExpanding) {\n            this.setAttribute('expanded', '');\n        } else {\n            this.removeAttribute('expanded');\n        }\n        \n        // Update the internal state and UI\n        this._isExpanded = isExpanding;\n        this._updateContentVisibility();\n        \n        // Dispatch a custom event\n        this.dispatchEvent(new CustomEvent('toggle', {\n            detail: { expanded: isExpanding },\n            bubbles: true,\n            composed: true\n        }));\n    }\n    \n    _createHeader() {\n        const header = document.createElement('div');\n        header.className = 'collapsible-item__header';\n        \n        // Create a container for the icon and label\n        const contentWrapper = document.createElement('div');\n        contentWrapper.style.display = 'flex';\n        contentWrapper.style.alignItems = 'center';\n        contentWrapper.style.flex = '1';\n        \n        // Add icon if provided and not hidden\n        const hideIcon = this.hasAttribute('hide-icon');\n        const icon = this.getAttribute('icon');\n        if (icon && !hideIcon) {\n            const iconEl = document.createElement('span');\n            iconEl.className = 'collapsible-item__icon';\n            iconEl.textContent = icon;\n            iconEl.style.marginRight = '0.5rem';\n            contentWrapper.appendChild(iconEl);\n        }\n        \n        // Add label\n        const label = this.getAttribute('label') || '';\n        if (label) {\n            const labelEl = document.createElement('span');\n            labelEl.className = 'collapsible-item__label';\n            labelEl.textContent = label;\n            contentWrapper.appendChild(labelEl);\n        }\n        \n        // Add the content wrapper to the header\n        header.appendChild(contentWrapper);\n                \n        return header;\n    }\n    \n    _render() {\n        // Prevent re-entrancy during rendering\n        if (!this._isRendering) {\n            this._isRendering = true;\n            \n            // Store any existing content that should be preserved\n            const existingContent = [];\n            Array.from(this.children).forEach(child => {\n                if (child !== this._header && child !== this._content) {\n                    existingContent.push(child);\n                }\n            });\n            \n            // Clear existing content\n            while (this.firstChild) {\n                this.removeChild(this.firstChild);\n            }\n            \n            // Create and append header\n            this._header = this._createHeader();\n            this.appendChild(this._header);\n            \n            // Set header attributes for accessibility\n            if (this._header) {\n                this._header.setAttribute('role', 'button');\n                this._header.setAttribute('aria-expanded', this._isExpanded ? 'true' : 'false');\n                this._header.setAttribute('tabindex', '0');\n                \n                // Add keyboard support\n                this._header.addEventListener('keydown', (e) => {\n                    if (e.key === 'Enter' || e.key === ' ') {\n                        e.preventDefault();\n                        this._toggleExpanded();\n                    }\n                });\n            }\n            \n            // Create and append content container\n            this._content = this._createContent();\n            if (this._content) {\n                this.appendChild(this._content);\n                \n                // Add back any existing content to the content container\n                existingContent.forEach(child => {\n                    this._content.appendChild(child);\n                });\n            }\n            \n            // Ensure proper ARIA attributes for accessibility\n            this.setAttribute('role', 'listitem');\n            \n            // Set initial content visibility\n            this._updateContentVisibility();\n            \n            // Mark as rendered\n            this.rendered = true;\n            this._isRendering = false;\n        }\n    }\n    \n    _createContent() {\n        const content = document.createElement('div');\n        content.className = 'collapsible-item__content';\n        \n        // Filter out any header elements and their content\n        const headerElements = this.querySelectorAll('.collapsible-item__header, .collapsible-item__label, .collapsible-item__icon');\n        const headerElementSet = new Set(headerElements);\n        \n        // Process direct children that are not part of the header\n        const filteredChildren = Array.from(this.childNodes).filter(node => {\n            // Keep only element nodes that are not in the header\n            if (node.nodeType === Node.ELEMENT_NODE) {\n                return !headerElementSet.has(node) && !node.closest('.collapsible-item__header');\n            }\n            // Keep text nodes that are not just whitespace\n            if (node.nodeType === Node.TEXT_NODE) {\n                return node.textContent.trim() !== '' && \n                       !node.textContent.includes('▶') && \n                       !node.textContent.includes('▼');\n            }\n            return false;\n        });\n        \n        // Add the filtered children to the content\n        filteredChildren.forEach(child => {\n            content.appendChild(child.cloneNode(true));\n        });\n        \n        return content;\n    }\n    \n    get expanded() {\n        return this._isExpanded;\n    }\n    \n    set expanded(value) {\n        if (this._isExpanded === value) return; // No change needed\n        \n        this._isExpanded = value;\n        \n        // Update the attribute to reflect the state in the DOM\n        if (this._isExpanded) {\n            this.setAttribute('expanded', '');\n        } else {\n            this.removeAttribute('expanded');\n        }\n        \n        // Update the content visibility immediately\n        this._updateContentVisibility();\n        \n        // Dispatch the toggle event\n        this.dispatchEvent(new CustomEvent('toggle', {\n            detail: { expanded: this._isExpanded },\n            bubbles: true,\n            composed: true\n        }));\n    }\n    \n    _toggleExpanded() {\n        this._isExpanded = !this._isExpanded;\n        \n        // Update the expanded attribute\n        if (this._isExpanded) {\n            this.setAttribute('expanded', '');\n        } else {\n            this.removeAttribute('expanded');\n        }\n        \n        // Update the UI\n        this._updateContentVisibility();\n        \n        // Dispatch the toggle event\n        this.dispatchEvent(new CustomEvent('toggle', {\n            detail: { expanded: this._isExpanded },\n            bubbles: true,\n            composed: true\n        }));\n    }\n    \n    _updateContentVisibility() {\n        if (!this._content || !this._header) return;\n        \n        const hideIcon = this.hasAttribute('hide-icon');\n        \n        if (this._isExpanded) {\n            this._content.classList.add('collapsible-item__content--expanded');\n            this._content.style.display = 'block';\n            this._header.setAttribute('aria-expanded', 'true');\n            this.classList.add('collapsible-item--expanded');\n            // Update icon to expanded state (down arrow) only if not hidden\n            if (!hideIcon) {\n                this.setAttribute('icon', '▼');\n            }\n        } else {\n            this._content.classList.remove('collapsible-item__content--expanded');\n            this._content.style.display = 'none';\n            this._header.setAttribute('aria-expanded', 'false');\n            this.classList.remove('collapsible-item--expanded');\n            // Update icon to collapsed state (right arrow) only if not hidden\n            if (!hideIcon) {\n                this.setAttribute('icon', '▶');\n            }\n        }\n    }\n    \n    attributeChangedCallback(name, oldValue, newValue) {\n        if (name === 'removeshift') {\n            this._removeShift = newValue !== null;\n            if (this._removeShift) {\n                this.classList.add('collapsible-item--no-padding');\n            } else {\n                this.classList.remove('collapsible-item--no-padding');\n            }\n        } else if (name === 'hide-icon' && this._header) {\n            // Handle hide-icon attribute changes\n            const iconEl = this._header.querySelector('.collapsible-item__icon');\n            if (newValue !== null) {\n                // hide-icon is set, remove the icon if it exists\n                if (iconEl) {\n                    iconEl.remove();\n                }\n            } else if (this.hasAttribute('icon')) {\n                // hide-icon is removed, add the icon back if we have an icon attribute\n                if (!iconEl) {\n                    const icon = this.getAttribute('icon');\n                    const newIconEl = document.createElement('span');\n                    newIconEl.className = 'collapsible-item__icon';\n                    newIconEl.textContent = icon;\n                    newIconEl.style.marginRight = '0.5rem';\n                    const contentWrapper = this._header.firstElementChild;\n                    if (contentWrapper) {\n                        contentWrapper.insertBefore(newIconEl, contentWrapper.firstChild);\n                    }\n                }\n            }\n        } else if (name === 'expanded') {\n            const wasExpanded = this._isExpanded;\n            this._isExpanded = newValue !== null;\n            \n            // Only update if the state actually changed\n            if (this._isExpanded !== wasExpanded) {\n                this._updateContentVisibility();\n            }\n        } else if (name === 'icon' && this._header) {\n            // Update the icon if it exists, or create it if it doesn't\n            let iconEl = this._header.querySelector('.collapsible-item__icon');\n            if (newValue) {\n                if (!iconEl) {\n                    iconEl = document.createElement('span');\n                    iconEl.className = 'collapsible-item__icon';\n                    this._header.insertBefore(iconEl, this._header.firstChild);\n                }\n                iconEl.textContent = newValue;\n            } else if (iconEl) {\n                this._header.removeChild(iconEl);\n            }\n        } else if (name === 'label' && this._header) {\n            // Update the label if it exists, or create it if it doesn't\n            let labelEl = this._header.querySelector('.collapsible-item__label');\n            if (labelEl) {\n                labelEl.textContent = newValue || '';\n            } else if (newValue) {\n                labelEl = document.createElement('span');\n                labelEl.className = 'collapsible-item__label';\n                labelEl.textContent = newValue;\n                this._header.appendChild(labelEl);\n            }\n        }\n    }\n}\n\n// Define the custom element with the correct name\nconst elementName = 'collapsible-item';\n\n// Check if the element is already defined and undefine it if necessary\nif (typeof window !== 'undefined' && window.customElements) {\n    // First, try to undefine the element if it exists\n    if (window.customElements.get(elementName)) {\n        const oldElement = window.customElements.get(elementName);\n        delete window.customElements._elements[elementName];\n    }\n    \n    // Define the element with the proper configuration\n    window.customElements.define(elementName, CollapsibleItem, { extends: 'li' });\n}"],"names":["CollapsibleItem","event","isExpanding","header","contentWrapper","hideIcon","icon","iconEl","label","labelEl","existingContent","child","e","content","headerElements","headerElementSet","node","value","name","oldValue","newValue","newIconEl","wasExpanded","elementName"],"mappings":"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"}